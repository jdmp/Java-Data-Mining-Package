/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.script.jdmp.analysis;

import org.jdmp.core.script.jdmp.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAScript(AScript node);
    void caseAAssignmentCommand(AAssignmentCommand node);
    void caseAStatementCommand(AStatementCommand node);
    void caseAStatement(AStatement node);
    void caseAIdentifierAssignment(AIdentifierAssignment node);
    void caseAArrayAssignment(AArrayAssignment node);
    void caseAValueExpression(AValueExpression node);
    void caseAMaximumRangeExpression(AMaximumRangeExpression node);
    void caseADefaultRangeExpression(ADefaultRangeExpression node);
    void caseAPlusExpression(APlusExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAExpressionPlusExpression(AExpressionPlusExpression node);
    void caseAExpressionMinusExpression(AExpressionMinusExpression node);
    void caseAExpressionMultExpression(AExpressionMultExpression node);
    void caseAExpressionDivExpression(AExpressionDivExpression node);
    void caseAStepsize(AStepsize node);
    void caseALiteralValue(ALiteralValue node);
    void caseAMatrixValue(AMatrixValue node);
    void caseAFunctionValue(AFunctionValue node);
    void caseAIdentifierValue(AIdentifierValue node);
    void caseAExpressionValue(AExpressionValue node);
    void caseAEmptyFunction(AEmptyFunction node);
    void caseAParameterFunction(AParameterFunction node);
    void caseAExpressionArgumentList(AExpressionArgumentList node);
    void caseAArgumentListArgumentList(AArgumentListArgumentList node);
    void caseAIntegerLiteral(AIntegerLiteral node);
    void caseAFloatingPointLiteral(AFloatingPointLiteral node);
    void caseAStringLiteral(AStringLiteral node);
    void caseACharLiteral(ACharLiteral node);
    void caseABooleanLiteral(ABooleanLiteral node);
    void caseASimpleName(ASimpleName node);
    void caseAQualifiedName(AQualifiedName node);
    void caseAEmptyMatrix(AEmptyMatrix node);
    void caseAValueMatrix(AValueMatrix node);
    void caseARowMatrix(ARowMatrix node);
    void caseAColumnMatrix(AColumnMatrix node);
    void caseAArrayMatrix(AArrayMatrix node);
    void caseAArray(AArray node);
    void caseAColumn(AColumn node);
    void caseARow(ARow node);
    void caseACommaValue(ACommaValue node);
    void caseASemicolonValue(ASemicolonValue node);
    void caseASemicolonRow(ASemicolonRow node);
    void caseATrueBoolean(ATrueBoolean node);
    void caseAFalseBoolean(AFalseBoolean node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTTraditionalComment(TTraditionalComment node);
    void caseTDocumentationComment(TDocumentationComment node);
    void caseTEndOfLineComment(TEndOfLineComment node);
    void caseTMatlabComment(TMatlabComment node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTNull(TNull node);
    void caseTLParenthese(TLParenthese node);
    void caseTRParenthese(TRParenthese node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTAssign(TAssign node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTComplement(TComplement node);
    void caseTBitComplement(TBitComplement node);
    void caseTQuestion(TQuestion node);
    void caseTColon(TColon node);
    void caseTEq(TEq node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTNeq(TNeq node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTDiv(TDiv node);
    void caseTInteger(TInteger node);
    void caseTFloatingPoint(TFloatingPoint node);
    void caseTChar(TChar node);
    void caseTString(TString node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
}
