/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.script.jdmp.parser;

import org.jdmp.core.script.jdmp.lexer.*;
import org.jdmp.core.script.jdmp.node.*;
import org.jdmp.core.script.jdmp.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAscript1Script */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAscript2Script */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAssignmentCommand */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AStatementCommand */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AStatement */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AIdentifierAssignment */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AArrayAssignment */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AValueExpression */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AMaximumRangeExpression */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AAdefaultrangeexpression1Expression */
		    {
			ArrayList list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce AAdefaultrangeexpression2Expression */
		    {
			ArrayList list = new10();
			push(goTo(4), list, false);
		    }
		    break;
                    case 11: /* reduce APlusExpression */
		    {
			ArrayList list = new11();
			push(goTo(4), list, false);
		    }
		    break;
                    case 12: /* reduce AMinusExpression */
		    {
			ArrayList list = new12();
			push(goTo(4), list, false);
		    }
		    break;
                    case 13: /* reduce AExpressionPlusExpression */
		    {
			ArrayList list = new13();
			push(goTo(4), list, false);
		    }
		    break;
                    case 14: /* reduce AExpressionMinusExpression */
		    {
			ArrayList list = new14();
			push(goTo(4), list, false);
		    }
		    break;
                    case 15: /* reduce AExpressionMultExpression */
		    {
			ArrayList list = new15();
			push(goTo(4), list, false);
		    }
		    break;
                    case 16: /* reduce AExpressionDivExpression */
		    {
			ArrayList list = new16();
			push(goTo(4), list, false);
		    }
		    break;
                    case 17: /* reduce AStepsize */
		    {
			ArrayList list = new17();
			push(goTo(5), list, false);
		    }
		    break;
                    case 18: /* reduce ALiteralValue */
		    {
			ArrayList list = new18();
			push(goTo(6), list, false);
		    }
		    break;
                    case 19: /* reduce AMatrixValue */
		    {
			ArrayList list = new19();
			push(goTo(6), list, false);
		    }
		    break;
                    case 20: /* reduce AFunctionValue */
		    {
			ArrayList list = new20();
			push(goTo(6), list, false);
		    }
		    break;
                    case 21: /* reduce AIdentifierValue */
		    {
			ArrayList list = new21();
			push(goTo(6), list, false);
		    }
		    break;
                    case 22: /* reduce AExpressionValue */
		    {
			ArrayList list = new22();
			push(goTo(6), list, false);
		    }
		    break;
                    case 23: /* reduce AEmptyFunction */
		    {
			ArrayList list = new23();
			push(goTo(7), list, false);
		    }
		    break;
                    case 24: /* reduce AParameterFunction */
		    {
			ArrayList list = new24();
			push(goTo(7), list, false);
		    }
		    break;
                    case 25: /* reduce AExpressionArgumentList */
		    {
			ArrayList list = new25();
			push(goTo(8), list, false);
		    }
		    break;
                    case 26: /* reduce AArgumentListArgumentList */
		    {
			ArrayList list = new26();
			push(goTo(8), list, false);
		    }
		    break;
                    case 27: /* reduce AIntegerLiteral */
		    {
			ArrayList list = new27();
			push(goTo(9), list, false);
		    }
		    break;
                    case 28: /* reduce AFloatingPointLiteral */
		    {
			ArrayList list = new28();
			push(goTo(9), list, false);
		    }
		    break;
                    case 29: /* reduce AStringLiteral */
		    {
			ArrayList list = new29();
			push(goTo(9), list, false);
		    }
		    break;
                    case 30: /* reduce ACharLiteral */
		    {
			ArrayList list = new30();
			push(goTo(9), list, false);
		    }
		    break;
                    case 31: /* reduce ABooleanLiteral */
		    {
			ArrayList list = new31();
			push(goTo(9), list, false);
		    }
		    break;
                    case 32: /* reduce ASimpleName */
		    {
			ArrayList list = new32();
			push(goTo(10), list, false);
		    }
		    break;
                    case 33: /* reduce AQualifiedName */
		    {
			ArrayList list = new33();
			push(goTo(10), list, false);
		    }
		    break;
                    case 34: /* reduce AEmptyMatrix */
		    {
			ArrayList list = new34();
			push(goTo(11), list, false);
		    }
		    break;
                    case 35: /* reduce AValueMatrix */
		    {
			ArrayList list = new35();
			push(goTo(11), list, false);
		    }
		    break;
                    case 36: /* reduce ARowMatrix */
		    {
			ArrayList list = new36();
			push(goTo(11), list, false);
		    }
		    break;
                    case 37: /* reduce AColumnMatrix */
		    {
			ArrayList list = new37();
			push(goTo(11), list, false);
		    }
		    break;
                    case 38: /* reduce AArrayMatrix */
		    {
			ArrayList list = new38();
			push(goTo(11), list, false);
		    }
		    break;
                    case 39: /* reduce AArray */
		    {
			ArrayList list = new39();
			push(goTo(12), list, false);
		    }
		    break;
                    case 40: /* reduce AColumn */
		    {
			ArrayList list = new40();
			push(goTo(13), list, false);
		    }
		    break;
                    case 41: /* reduce ARow */
		    {
			ArrayList list = new41();
			push(goTo(14), list, false);
		    }
		    break;
                    case 42: /* reduce ACommaValue */
		    {
			ArrayList list = new42();
			push(goTo(15), list, false);
		    }
		    break;
                    case 43: /* reduce ASemicolonValue */
		    {
			ArrayList list = new43();
			push(goTo(16), list, false);
		    }
		    break;
                    case 44: /* reduce ASemicolonRow */
		    {
			ArrayList list = new44();
			push(goTo(17), list, false);
		    }
		    break;
                    case 45: /* reduce ATrueBoolean */
		    {
			ArrayList list = new45();
			push(goTo(18), list, false);
		    }
		    break;
                    case 46: /* reduce AFalseBoolean */
		    {
			ArrayList list = new46();
			push(goTo(18), list, false);
		    }
		    break;
                    case 47: /* reduce ATerminal$Command */
		    {
			ArrayList list = new47();
			push(goTo(19), list, true);
		    }
		    break;
                    case 48: /* reduce ANonTerminal$Command */
		    {
			ArrayList list = new48();
			push(goTo(19), list, true);
		    }
		    break;
                    case 49: /* reduce ATerminal$SemicolonRow */
		    {
			ArrayList list = new49();
			push(goTo(20), list, true);
		    }
		    break;
                    case 50: /* reduce ANonTerminal$SemicolonRow */
		    {
			ArrayList list = new50();
			push(goTo(20), list, true);
		    }
		    break;
                    case 51: /* reduce ATerminal$SemicolonValue */
		    {
			ArrayList list = new51();
			push(goTo(21), list, true);
		    }
		    break;
                    case 52: /* reduce ANonTerminal$SemicolonValue */
		    {
			ArrayList list = new52();
			push(goTo(21), list, true);
		    }
		    break;
                    case 53: /* reduce ATerminal$CommaValue */
		    {
			ArrayList list = new53();
			push(goTo(22), list, true);
		    }
		    break;
                    case 54: /* reduce ANonTerminal$CommaValue */
		    {
			ArrayList list = new54();
			push(goTo(22), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PScript node1 = (PScript) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAscript1Script */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PScript pscriptNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pscriptNode1 = new AScript(listNode2);
        }
	nodeList.add(pscriptNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAscript2Script */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PScript pscriptNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pscriptNode1 = new AScript(listNode3);
        }
	nodeList.add(pscriptNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAssignmentCommand */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pcommandNode1 = new AAssignmentCommand(passignmentNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AStatementCommand */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcommandNode1 = new AStatementCommand(pstatementNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TSemicolon tsemicolonNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstatementNode1 = new AStatement(pexpressionNode2, tsemicolonNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AIdentifierAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        PName pnameNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        passignmentNode1 = new AIdentifierAssignment(pnameNode2, tassignNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AArrayAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        PFunction pfunctionNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        passignmentNode1 = new AArrayAssignment(pfunctionNode2, tassignNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AValueExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pexpressionNode1 = new AValueExpression(pvalueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AMaximumRangeExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TColon tcolonNode2;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);

        pexpressionNode1 = new AMaximumRangeExpression(tcolonNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAdefaultrangeexpression1Expression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        TColon tcolonNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PValue pvalueNode5;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pvalueNode5 = (PValue)nodeArrayList3.get(0);

        pexpressionNode1 = new ADefaultRangeExpression(pvalueNode2, tcolonNode3, null, pvalueNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAdefaultrangeexpression2Expression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        TColon tcolonNode3;
        PStepsize pstepsizeNode4;
        PValue pvalueNode5;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pstepsizeNode4 = (PStepsize)nodeArrayList3.get(0);
        pvalueNode5 = (PValue)nodeArrayList4.get(0);

        pexpressionNode1 = new ADefaultRangeExpression(pvalueNode2, tcolonNode3, pstepsizeNode4, pvalueNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce APlusExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TPlus tplusNode2;
        PExpression pexpressionNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new APlusExpression(tplusNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AMinusExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TMinus tminusNode2;
        PExpression pexpressionNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AMinusExpression(tminusNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AExpressionPlusExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        TPlus tplusNode3;
        PExpression pexpressionNode4;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AExpressionPlusExpression(pvalueNode2, tplusNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AExpressionMinusExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        TMinus tminusNode3;
        PExpression pexpressionNode4;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AExpressionMinusExpression(pvalueNode2, tminusNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AExpressionMultExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        TStar tstarNode3;
        PExpression pexpressionNode4;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AExpressionMultExpression(pvalueNode2, tstarNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AExpressionDivExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        TDiv tdivNode3;
        PExpression pexpressionNode4;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AExpressionDivExpression(pvalueNode2, tdivNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AStepsize */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStepsize pstepsizeNode1;
        {
            // Block
        PValue pvalueNode2;
        TColon tcolonNode3;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);

        pstepsizeNode1 = new AStepsize(pvalueNode2, tcolonNode3);
        }
	nodeList.add(pstepsizeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ALiteralValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pvalueNode1 = new ALiteralValue(pliteralNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AMatrixValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PMatrix pmatrixNode2;
        pmatrixNode2 = (PMatrix)nodeArrayList1.get(0);

        pvalueNode1 = new AMatrixValue(pmatrixNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AFunctionValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pvalueNode1 = new AFunctionValue(pfunctionNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AIdentifierValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pvalueNode1 = new AIdentifierValue(pnameNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AExpressionValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TLParenthese tlparentheseNode2;
        PExpression pexpressionNode3;
        TRParenthese trparentheseNode4;
        tlparentheseNode2 = (TLParenthese)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparentheseNode4 = (TRParenthese)nodeArrayList3.get(0);

        pvalueNode1 = new AExpressionValue(tlparentheseNode2, pexpressionNode3, trparentheseNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AEmptyFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PName pnameNode2;
        TLParenthese tlparentheseNode3;
        TRParenthese trparentheseNode4;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        trparentheseNode4 = (TRParenthese)nodeArrayList3.get(0);

        pfunctionNode1 = new AEmptyFunction(pnameNode2, tlparentheseNode3, trparentheseNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AParameterFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PName pnameNode2;
        TLParenthese tlparentheseNode3;
        PArgumentList pargumentlistNode4;
        TRParenthese trparentheseNode5;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tlparentheseNode3 = (TLParenthese)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trparentheseNode5 = (TRParenthese)nodeArrayList4.get(0);

        pfunctionNode1 = new AParameterFunction(pnameNode2, tlparentheseNode3, pargumentlistNode4, trparentheseNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AExpressionArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pargumentlistNode1 = new AExpressionArgumentList(pexpressionNode2);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AArgumentListArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PArgumentList pargumentlistNode2;
        TComma tcommaNode3;
        PExpression pexpressionNode4;
        pargumentlistNode2 = (PArgumentList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pargumentlistNode1 = new AArgumentListArgumentList(pargumentlistNode2, tcommaNode3, pexpressionNode4);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AIntegerLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pliteralNode1 = new AIntegerLiteral(tintegerNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AFloatingPointLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TFloatingPoint tfloatingpointNode2;
        tfloatingpointNode2 = (TFloatingPoint)nodeArrayList1.get(0);

        pliteralNode1 = new AFloatingPointLiteral(tfloatingpointNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteral(tstringNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ACharLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pliteralNode1 = new ACharLiteral(tcharNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ABooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PBoolean pbooleanNode2;
        pbooleanNode2 = (PBoolean)nodeArrayList1.get(0);

        pliteralNode1 = new ABooleanLiteral(pbooleanNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ASimpleName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pnameNode1 = new ASimpleName(tidentifierNode2);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AQualifiedName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        PName pnameNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pnameNode1 = new AQualifiedName(pnameNode2, tdotNode3, tidentifierNode4);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AEmptyMatrix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatrix pmatrixNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TRBracket trbracketNode3;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        trbracketNode3 = (TRBracket)nodeArrayList2.get(0);

        pmatrixNode1 = new AEmptyMatrix(tlbracketNode2, trbracketNode3);
        }
	nodeList.add(pmatrixNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AValueMatrix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatrix pmatrixNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PExpression pexpressionNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pmatrixNode1 = new AValueMatrix(tlbracketNode2, pexpressionNode3, trbracketNode4);
        }
	nodeList.add(pmatrixNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ARowMatrix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatrix pmatrixNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PRow prowNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        prowNode3 = (PRow)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pmatrixNode1 = new ARowMatrix(tlbracketNode2, prowNode3, trbracketNode4);
        }
	nodeList.add(pmatrixNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AColumnMatrix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatrix pmatrixNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PColumn pcolumnNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pcolumnNode3 = (PColumn)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pmatrixNode1 = new AColumnMatrix(tlbracketNode2, pcolumnNode3, trbracketNode4);
        }
	nodeList.add(pmatrixNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AArrayMatrix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatrix pmatrixNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PArray parrayNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        parrayNode3 = (PArray)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pmatrixNode1 = new AArrayMatrix(tlbracketNode2, parrayNode3, trbracketNode4);
        }
	nodeList.add(pmatrixNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AArray */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        PRow prowNode2;
        LinkedList listNode4 = new LinkedList();
        prowNode2 = (PRow)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parrayNode1 = new AArray(prowNode2, listNode4);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AColumn */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PColumn pcolumnNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode4 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcolumnNode1 = new AColumn(pexpressionNode2, listNode4);
        }
	nodeList.add(pcolumnNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ARow */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRow prowNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode4 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        prowNode1 = new ARow(pexpressionNode2, listNode4);
        }
	nodeList.add(prowNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ACommaValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommaValue pcommavalueNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pcommavalueNode1 = new ACommaValue(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pcommavalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ASemicolonValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSemicolonValue psemicolonvalueNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PExpression pexpressionNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        psemicolonvalueNode1 = new ASemicolonValue(tsemicolonNode2, pexpressionNode3);
        }
	nodeList.add(psemicolonvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ASemicolonRow */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSemicolonRow psemicolonrowNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PRow prowNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        prowNode3 = (PRow)nodeArrayList2.get(0);

        psemicolonrowNode1 = new ASemicolonRow(tsemicolonNode2, prowNode3);
        }
	nodeList.add(psemicolonrowNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ATrueBoolean */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleanNode1 = new ATrueBoolean(ttrueNode2);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AFalseBoolean */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleanNode1 = new AFalseBoolean(tfalseNode2);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ATerminal$Command */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PCommand pcommandNode1;
        pcommandNode1 = (PCommand)nodeArrayList1.get(0);
	if(pcommandNode1 != null)
	{
	  listNode2.add(pcommandNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ANonTerminal$Command */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PCommand pcommandNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommandNode2 = (PCommand)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandNode2 != null)
	{
	  listNode3.add(pcommandNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ATerminal$SemicolonRow */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PSemicolonRow psemicolonrowNode1;
        psemicolonrowNode1 = (PSemicolonRow)nodeArrayList1.get(0);
	if(psemicolonrowNode1 != null)
	{
	  listNode2.add(psemicolonrowNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ANonTerminal$SemicolonRow */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PSemicolonRow psemicolonrowNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psemicolonrowNode2 = (PSemicolonRow)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psemicolonrowNode2 != null)
	{
	  listNode3.add(psemicolonrowNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ATerminal$SemicolonValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PSemicolonValue psemicolonvalueNode1;
        psemicolonvalueNode1 = (PSemicolonValue)nodeArrayList1.get(0);
	if(psemicolonvalueNode1 != null)
	{
	  listNode2.add(psemicolonvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ANonTerminal$SemicolonValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PSemicolonValue psemicolonvalueNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psemicolonvalueNode2 = (PSemicolonValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psemicolonvalueNode2 != null)
	{
	  listNode3.add(psemicolonvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ATerminal$CommaValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PCommaValue pcommavalueNode1;
        pcommavalueNode1 = (PCommaValue)nodeArrayList1.get(0);
	if(pcommavalueNode1 != null)
	{
	  listNode2.add(pcommavalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce ANonTerminal$CommaValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PCommaValue pcommavalueNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommavalueNode2 = (PCommaValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommavalueNode2 != null)
	{
	  listNode3.add(pcommavalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 3}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 4}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {8, SHIFT, 28}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 6}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 7}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 13}, {32, ACCEPT, -1}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 17}, {9, SHIFT, 35}, },
			{{-1, REDUCE, 7}, {18, SHIFT, 36}, {23, SHIFT, 37}, {24, SHIFT, 38}, {25, SHIFT, 39}, {26, SHIFT, 40}, },
			{{-1, REDUCE, 20}, {12, SHIFT, 41}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 42}, {11, SHIFT, 43}, {12, SHIFT, 44}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 25}, {4, SHIFT, 46}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, {3, SHIFT, 42}, {11, SHIFT, 43}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 29}, {8, SHIFT, 47}, {9, SHIFT, 48}, {10, SHIFT, 49}, },
			{{-1, ERROR, 30}, {8, SHIFT, 54}, },
			{{-1, ERROR, 31}, {8, SHIFT, 55}, },
			{{-1, ERROR, 32}, {8, SHIFT, 56}, {9, SHIFT, 57}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 36}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 37}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 38}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 39}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 40}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 41}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 42}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 67}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 43}, {31, SHIFT, 70}, },
			{{-1, ERROR, 44}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 48}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, ERROR, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 40}, {9, SHIFT, 48}, },
			{{-1, REDUCE, 41}, {10, SHIFT, 49}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 57}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 39}, {9, SHIFT, 57}, },
			{{-1, ERROR, 60}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 9}, {18, SHIFT, 80}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 66}, {9, SHIFT, 81}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 69}, {4, SHIFT, 82}, {10, SHIFT, 83}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 71}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 76}, {10, SHIFT, 49}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 83}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {7, SHIFT, 4}, {18, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, {27, SHIFT, 8}, {28, SHIFT, 9}, {29, SHIFT, 10}, {30, SHIFT, 11}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 13}, },
			{{-1, 14}, {24, 45}, },
			{{-1, 15}, },
			{{-1, 16}, },
			{{-1, 17}, {3, 25}, {4, 29}, {6, 33}, {7, 34}, {37, 62}, {38, 63}, {39, 64}, {40, 65}, {41, 66}, {42, 68}, {44, 71}, {48, 72}, {49, 73}, {57, 76}, {83, 85}, },
			{{-1, 60}, },
			{{-1, 18}, {36, 61}, {60, 79}, },
			{{-1, 26}, {0, 19}, {24, 19}, },
			{{-1, 69}, },
			{{-1, 20}, },
			{{-1, 27}, {0, 21}, {24, 21}, },
			{{-1, 22}, },
			{{-1, 30}, },
			{{-1, 31}, },
			{{-1, 32}, {57, 77}, },
			{{-1, 50}, {53, 75}, },
			{{-1, 51}, {52, 74}, },
			{{-1, 58}, {59, 78}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 59}, },
			{{-1, 52}, },
			{{-1, 53}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'true', 'false', '(', '[', ':', '+', '-', integer, floating point, char, string, identifier, EOF",
			"expecting: ')', ']', ';', ',', ':', '+', '-', '*', '/'",
			"expecting: 'true', 'false', '(', '[', ':', '+', '-', integer, floating point, char, string, identifier",
			"expecting: 'true', 'false', '(', '[', ']', ':', '+', '-', integer, floating point, char, string, identifier",
			"expecting: ')', ']', ';', ','",
			"expecting: '(', ')', ']', ';', ',', '.', '=', ':', '+', '-', '*', '/'",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: ';', '=', ':', '+', '-', '*', '/'",
			"expecting: '(', ';', '.', '=', ':', '+', '-', '*', '/'",
			"expecting: ')'",
			"expecting: '(', ')', ']', ';', ',', '.', ':', '+', '-', '*', '/'",
			"expecting: ']', ';', ','",
			"expecting: ']'",
			"expecting: ']', ';'",
			"expecting: 'true', 'false', '(', '[', integer, floating point, char, string, identifier",
			"expecting: 'true', 'false', '(', ')', '[', ':', '+', '-', integer, floating point, char, string, identifier",
			"expecting: identifier",
			"expecting: ')', ']', ';', ',', ':'",
			"expecting: ')', ']', ';', ',', '=', ':', '+', '-', '*', '/'",
			"expecting: ')', ','",
			"expecting: ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 2, 2, 1, 1, 1, 1, 5, 6, 0, 0, 0, 7, 1, 8, 1, 9, 1, 1, 0, 10, 1, 11, 1, 12, 13, 13, 14, 4, 4, 0, 15, 2, 2, 2, 2, 2, 16, 17, 2, 0, 1, 1, 2, 2, 12, 14, 14, 12, 1, 1, 1, 2, 14, 14, 15, 18, 4, 4, 4, 4, 7, 19, 20, 20, 5, 7, 14, 12, 14, 12, 21, 14, 14, 4, 15, 0, 19, 2, 0, 20, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
