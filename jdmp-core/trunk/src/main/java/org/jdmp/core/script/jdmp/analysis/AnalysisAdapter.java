/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.script.jdmp.analysis;

import java.util.*;
import org.jdmp.core.script.jdmp.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAScript(AScript node)
    {
        defaultCase(node);
    }

    public void caseAAssignmentCommand(AAssignmentCommand node)
    {
        defaultCase(node);
    }

    public void caseAStatementCommand(AStatementCommand node)
    {
        defaultCase(node);
    }

    public void caseAStatement(AStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierAssignment(AIdentifierAssignment node)
    {
        defaultCase(node);
    }

    public void caseAArrayAssignment(AArrayAssignment node)
    {
        defaultCase(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        defaultCase(node);
    }

    public void caseAMaximumRangeExpression(AMaximumRangeExpression node)
    {
        defaultCase(node);
    }

    public void caseADefaultRangeExpression(ADefaultRangeExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPlusExpression(AExpressionPlusExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionMinusExpression(AExpressionMinusExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionMultExpression(AExpressionMultExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionDivExpression(AExpressionDivExpression node)
    {
        defaultCase(node);
    }

    public void caseAStepsize(AStepsize node)
    {
        defaultCase(node);
    }

    public void caseALiteralValue(ALiteralValue node)
    {
        defaultCase(node);
    }

    public void caseAMatrixValue(AMatrixValue node)
    {
        defaultCase(node);
    }

    public void caseAFunctionValue(AFunctionValue node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierValue(AIdentifierValue node)
    {
        defaultCase(node);
    }

    public void caseAExpressionValue(AExpressionValue node)
    {
        defaultCase(node);
    }

    public void caseAEmptyFunction(AEmptyFunction node)
    {
        defaultCase(node);
    }

    public void caseAParameterFunction(AParameterFunction node)
    {
        defaultCase(node);
    }

    public void caseAExpressionArgumentList(AExpressionArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAArgumentListArgumentList(AArgumentListArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseACharLiteral(ACharLiteral node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseASimpleName(ASimpleName node)
    {
        defaultCase(node);
    }

    public void caseAQualifiedName(AQualifiedName node)
    {
        defaultCase(node);
    }

    public void caseAEmptyMatrix(AEmptyMatrix node)
    {
        defaultCase(node);
    }

    public void caseAValueMatrix(AValueMatrix node)
    {
        defaultCase(node);
    }

    public void caseARowMatrix(ARowMatrix node)
    {
        defaultCase(node);
    }

    public void caseAColumnMatrix(AColumnMatrix node)
    {
        defaultCase(node);
    }

    public void caseAArrayMatrix(AArrayMatrix node)
    {
        defaultCase(node);
    }

    public void caseAArray(AArray node)
    {
        defaultCase(node);
    }

    public void caseAColumn(AColumn node)
    {
        defaultCase(node);
    }

    public void caseARow(ARow node)
    {
        defaultCase(node);
    }

    public void caseACommaValue(ACommaValue node)
    {
        defaultCase(node);
    }

    public void caseASemicolonValue(ASemicolonValue node)
    {
        defaultCase(node);
    }

    public void caseASemicolonRow(ASemicolonRow node)
    {
        defaultCase(node);
    }

    public void caseATrueBoolean(ATrueBoolean node)
    {
        defaultCase(node);
    }

    public void caseAFalseBoolean(AFalseBoolean node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTTraditionalComment(TTraditionalComment node)
    {
        defaultCase(node);
    }

    public void caseTDocumentationComment(TDocumentationComment node)
    {
        defaultCase(node);
    }

    public void caseTEndOfLineComment(TEndOfLineComment node)
    {
        defaultCase(node);
    }

    public void caseTMatlabComment(TMatlabComment node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    public void caseTLParenthese(TLParenthese node)
    {
        defaultCase(node);
    }

    public void caseTRParenthese(TRParenthese node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTComplement(TComplement node)
    {
        defaultCase(node);
    }

    public void caseTBitComplement(TBitComplement node)
    {
        defaultCase(node);
    }

    public void caseTQuestion(TQuestion node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    public void caseTFloatingPoint(TFloatingPoint node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
