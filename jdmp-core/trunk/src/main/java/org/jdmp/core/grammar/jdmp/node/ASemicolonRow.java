/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.grammar.jdmp.node;

import org.jdmp.core.grammar.jdmp.analysis.*;

@SuppressWarnings("nls")
public final class ASemicolonRow extends PSemicolonRow
{
    private TSemicolonToken _semicolonToken_;
    private PRow _row_;

    public ASemicolonRow()
    {
        // Constructor
    }

    public ASemicolonRow(
        @SuppressWarnings("hiding") TSemicolonToken _semicolonToken_,
        @SuppressWarnings("hiding") PRow _row_)
    {
        // Constructor
        setSemicolonToken(_semicolonToken_);

        setRow(_row_);

    }

    @Override
    public Object clone()
    {
        return new ASemicolonRow(
            cloneNode(this._semicolonToken_),
            cloneNode(this._row_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASemicolonRow(this);
    }

    public TSemicolonToken getSemicolonToken()
    {
        return this._semicolonToken_;
    }

    public void setSemicolonToken(TSemicolonToken node)
    {
        if(this._semicolonToken_ != null)
        {
            this._semicolonToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolonToken_ = node;
    }

    public PRow getRow()
    {
        return this._row_;
    }

    public void setRow(PRow node)
    {
        if(this._row_ != null)
        {
            this._row_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._row_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._semicolonToken_)
            + toString(this._row_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._semicolonToken_ == child)
        {
            this._semicolonToken_ = null;
            return;
        }

        if(this._row_ == child)
        {
            this._row_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._semicolonToken_ == oldChild)
        {
            setSemicolonToken((TSemicolonToken) newChild);
            return;
        }

        if(this._row_ == oldChild)
        {
            setRow((PRow) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
