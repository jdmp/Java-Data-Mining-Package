/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.grammar.jdmp.analysis;

import org.jdmp.core.grammar.jdmp.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAScript(AScript node);
    void caseAStatementCommand(AStatementCommand node);
    void caseAAssignmentCommand(AAssignmentCommand node);
    void caseASilentStatement(ASilentStatement node);
    void caseAVerboseStatement(AVerboseStatement node);
    void caseASilentAssignment(ASilentAssignment node);
    void caseAVerboseAssignment(AVerboseAssignment node);
    void caseAFactorExpression(AFactorExpression node);
    void caseAPlusExpression(APlusExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseATermFactor(ATermFactor node);
    void caseAMultiplicationFactor(AMultiplicationFactor node);
    void caseADivisionFactor(ADivisionFactor node);
    void caseAMatrixTerm(AMatrixTerm node);
    void caseAExpressionTerm(AExpressionTerm node);
    void caseAScalarMatrix(AScalarMatrix node);
    void caseAEmptyMatrix(AEmptyMatrix node);
    void caseAValueMatrix(AValueMatrix node);
    void caseARowMatrix(ARowMatrix node);
    void caseAColumnMatrix(AColumnMatrix node);
    void caseAArrayMatrix(AArrayMatrix node);
    void caseAArray(AArray node);
    void caseAColumn(AColumn node);
    void caseARow(ARow node);
    void caseACommaValue(ACommaValue node);
    void caseASemicolonValue(ASemicolonValue node);
    void caseASemicolonRow(ASemicolonRow node);
    void caseAIntegerValue(AIntegerValue node);
    void caseAFloatingPointValue(AFloatingPointValue node);
    void caseABooleanValue(ABooleanValue node);
    void caseACharacterValue(ACharacterValue node);
    void caseAStringValue(AStringValue node);
    void caseAIdentifierValue(AIdentifierValue node);
    void caseANullValue(ANullValue node);
    void caseAIdentifier(AIdentifier node);
    void caseANull(ANull node);
    void caseAInteger(AInteger node);
    void caseAFloatingPoint(AFloatingPoint node);
    void caseATrueBoolean(ATrueBoolean node);
    void caseAFalseBoolean(AFalseBoolean node);
    void caseATrue(ATrue node);
    void caseAFalse(AFalse node);

    void caseTSemicolonToken(TSemicolonToken node);
    void caseTPlusToken(TPlusToken node);
    void caseTMinusToken(TMinusToken node);
    void caseTMultiplicationToken(TMultiplicationToken node);
    void caseTDivisionToken(TDivisionToken node);
    void caseTCommaToken(TCommaToken node);
    void caseTEqualsToken(TEqualsToken node);
    void caseTLParToken(TLParToken node);
    void caseTRParToken(TRParToken node);
    void caseTLBracketToken(TLBracketToken node);
    void caseTRBracketToken(TRBracketToken node);
    void caseTNullToken(TNullToken node);
    void caseTNewToken(TNewToken node);
    void caseTTrueToken(TTrueToken node);
    void caseTFalseToken(TFalseToken node);
    void caseTIdentifierToken(TIdentifierToken node);
    void caseTIntegerToken(TIntegerToken node);
    void caseTFloatingPointToken(TFloatingPointToken node);
    void caseTBooleanToken(TBooleanToken node);
    void caseTCharacterToken(TCharacterToken node);
    void caseTStringToken(TStringToken node);
    void caseTWhiteSpaceToken(TWhiteSpaceToken node);
    void caseTTraditionalCommentToken(TTraditionalCommentToken node);
    void caseTDocumentationCommentToken(TDocumentationCommentToken node);
    void caseTEndOfLineCommentToken(TEndOfLineCommentToken node);
    void caseTMatlabCommentToken(TMatlabCommentToken node);
    void caseEOF(EOF node);
}
