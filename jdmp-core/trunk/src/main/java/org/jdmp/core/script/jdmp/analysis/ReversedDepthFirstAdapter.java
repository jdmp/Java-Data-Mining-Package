/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.script.jdmp.analysis;

import java.util.*;
import org.jdmp.core.script.jdmp.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPScript().apply(this);
        outStart(node);
    }

    public void inAScript(AScript node)
    {
        defaultIn(node);
    }

    public void outAScript(AScript node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScript(AScript node)
    {
        inAScript(node);
        {
            List<PCommand> copy = new ArrayList<PCommand>(node.getCommands());
            Collections.reverse(copy);
            for(PCommand e : copy)
            {
                e.apply(this);
            }
        }
        outAScript(node);
    }

    public void inAAssignmentCommand(AAssignmentCommand node)
    {
        defaultIn(node);
    }

    public void outAAssignmentCommand(AAssignmentCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentCommand(AAssignmentCommand node)
    {
        inAAssignmentCommand(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentCommand(node);
    }

    public void inAStatementCommand(AStatementCommand node)
    {
        defaultIn(node);
    }

    public void outAStatementCommand(AStatementCommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementCommand(AStatementCommand node)
    {
        inAStatementCommand(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementCommand(node);
    }

    public void inAStatement(AStatement node)
    {
        defaultIn(node);
    }

    public void outAStatement(AStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatement(AStatement node)
    {
        inAStatement(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAStatement(node);
    }

    public void inAIdentifierAssignment(AIdentifierAssignment node)
    {
        defaultIn(node);
    }

    public void outAIdentifierAssignment(AIdentifierAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierAssignment(AIdentifierAssignment node)
    {
        inAIdentifierAssignment(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAIdentifierAssignment(node);
    }

    public void inAArrayAssignment(AArrayAssignment node)
    {
        defaultIn(node);
    }

    public void outAArrayAssignment(AArrayAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAssignment(AArrayAssignment node)
    {
        inAArrayAssignment(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAArrayAssignment(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAMaximumRangeExpression(AMaximumRangeExpression node)
    {
        defaultIn(node);
    }

    public void outAMaximumRangeExpression(AMaximumRangeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaximumRangeExpression(AMaximumRangeExpression node)
    {
        inAMaximumRangeExpression(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAMaximumRangeExpression(node);
    }

    public void inADefaultRangeExpression(ADefaultRangeExpression node)
    {
        defaultIn(node);
    }

    public void outADefaultRangeExpression(ADefaultRangeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultRangeExpression(ADefaultRangeExpression node)
    {
        inADefaultRangeExpression(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        if(node.getStepsize() != null)
        {
            node.getStepsize().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        outADefaultRangeExpression(node);
    }

    public void inAPlusExpression(APlusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression(APlusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpression(APlusExpression node)
    {
        inAPlusExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAExpressionPlusExpression(AExpressionPlusExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionPlusExpression(AExpressionPlusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPlusExpression(AExpressionPlusExpression node)
    {
        inAExpressionPlusExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAExpressionPlusExpression(node);
    }

    public void inAExpressionMinusExpression(AExpressionMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionMinusExpression(AExpressionMinusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionMinusExpression(AExpressionMinusExpression node)
    {
        inAExpressionMinusExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAExpressionMinusExpression(node);
    }

    public void inAExpressionMultExpression(AExpressionMultExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionMultExpression(AExpressionMultExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionMultExpression(AExpressionMultExpression node)
    {
        inAExpressionMultExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAExpressionMultExpression(node);
    }

    public void inAExpressionDivExpression(AExpressionDivExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionDivExpression(AExpressionDivExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionDivExpression(AExpressionDivExpression node)
    {
        inAExpressionDivExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAExpressionDivExpression(node);
    }

    public void inAStepsize(AStepsize node)
    {
        defaultIn(node);
    }

    public void outAStepsize(AStepsize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStepsize(AStepsize node)
    {
        inAStepsize(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAStepsize(node);
    }

    public void inALiteralValue(ALiteralValue node)
    {
        defaultIn(node);
    }

    public void outALiteralValue(ALiteralValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralValue(ALiteralValue node)
    {
        inALiteralValue(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralValue(node);
    }

    public void inAMatrixValue(AMatrixValue node)
    {
        defaultIn(node);
    }

    public void outAMatrixValue(AMatrixValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrixValue(AMatrixValue node)
    {
        inAMatrixValue(node);
        if(node.getMatrix() != null)
        {
            node.getMatrix().apply(this);
        }
        outAMatrixValue(node);
    }

    public void inAFunctionValue(AFunctionValue node)
    {
        defaultIn(node);
    }

    public void outAFunctionValue(AFunctionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionValue(AFunctionValue node)
    {
        inAFunctionValue(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionValue(node);
    }

    public void inAIdentifierValue(AIdentifierValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierValue(AIdentifierValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierValue(AIdentifierValue node)
    {
        inAIdentifierValue(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAIdentifierValue(node);
    }

    public void inAExpressionValue(AExpressionValue node)
    {
        defaultIn(node);
    }

    public void outAExpressionValue(AExpressionValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionValue(AExpressionValue node)
    {
        inAExpressionValue(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        outAExpressionValue(node);
    }

    public void inAEmptyFunction(AEmptyFunction node)
    {
        defaultIn(node);
    }

    public void outAEmptyFunction(AEmptyFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyFunction(AEmptyFunction node)
    {
        inAEmptyFunction(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAEmptyFunction(node);
    }

    public void inAParameterFunction(AParameterFunction node)
    {
        defaultIn(node);
    }

    public void outAParameterFunction(AParameterFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterFunction(AParameterFunction node)
    {
        inAParameterFunction(node);
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAParameterFunction(node);
    }

    public void inAExpressionArgumentList(AExpressionArgumentList node)
    {
        defaultIn(node);
    }

    public void outAExpressionArgumentList(AExpressionArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionArgumentList(AExpressionArgumentList node)
    {
        inAExpressionArgumentList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionArgumentList(node);
    }

    public void inAArgumentListArgumentList(AArgumentListArgumentList node)
    {
        defaultIn(node);
    }

    public void outAArgumentListArgumentList(AArgumentListArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentListArgumentList(AArgumentListArgumentList node)
    {
        inAArgumentListArgumentList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        outAArgumentListArgumentList(node);
    }

    public void inAIntegerLiteral(AIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteral(AIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        inAIntegerLiteral(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerLiteral(node);
    }

    public void inAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatingPointLiteral(AFloatingPointLiteral node)
    {
        inAFloatingPointLiteral(node);
        if(node.getFloatingPoint() != null)
        {
            node.getFloatingPoint().apply(this);
        }
        outAFloatingPointLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inACharLiteral(ACharLiteral node)
    {
        defaultIn(node);
    }

    public void outACharLiteral(ACharLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharLiteral(ACharLiteral node)
    {
        inACharLiteral(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharLiteral(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inASimpleName(ASimpleName node)
    {
        defaultIn(node);
    }

    public void outASimpleName(ASimpleName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleName(ASimpleName node)
    {
        inASimpleName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleName(node);
    }

    public void inAQualifiedName(AQualifiedName node)
    {
        defaultIn(node);
    }

    public void outAQualifiedName(AQualifiedName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQualifiedName(AQualifiedName node)
    {
        inAQualifiedName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAQualifiedName(node);
    }

    public void inAEmptyMatrix(AEmptyMatrix node)
    {
        defaultIn(node);
    }

    public void outAEmptyMatrix(AEmptyMatrix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyMatrix(AEmptyMatrix node)
    {
        inAEmptyMatrix(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAEmptyMatrix(node);
    }

    public void inAValueMatrix(AValueMatrix node)
    {
        defaultIn(node);
    }

    public void outAValueMatrix(AValueMatrix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueMatrix(AValueMatrix node)
    {
        inAValueMatrix(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAValueMatrix(node);
    }

    public void inARowMatrix(ARowMatrix node)
    {
        defaultIn(node);
    }

    public void outARowMatrix(ARowMatrix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARowMatrix(ARowMatrix node)
    {
        inARowMatrix(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getRow() != null)
        {
            node.getRow().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outARowMatrix(node);
    }

    public void inAColumnMatrix(AColumnMatrix node)
    {
        defaultIn(node);
    }

    public void outAColumnMatrix(AColumnMatrix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColumnMatrix(AColumnMatrix node)
    {
        inAColumnMatrix(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getColumn() != null)
        {
            node.getColumn().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAColumnMatrix(node);
    }

    public void inAArrayMatrix(AArrayMatrix node)
    {
        defaultIn(node);
    }

    public void outAArrayMatrix(AArrayMatrix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayMatrix(AArrayMatrix node)
    {
        inAArrayMatrix(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAArrayMatrix(node);
    }

    public void inAArray(AArray node)
    {
        defaultIn(node);
    }

    public void outAArray(AArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArray(AArray node)
    {
        inAArray(node);
        {
            List<PSemicolonRow> copy = new ArrayList<PSemicolonRow>(node.getAdditionalRows());
            Collections.reverse(copy);
            for(PSemicolonRow e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRow() != null)
        {
            node.getRow().apply(this);
        }
        outAArray(node);
    }

    public void inAColumn(AColumn node)
    {
        defaultIn(node);
    }

    public void outAColumn(AColumn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColumn(AColumn node)
    {
        inAColumn(node);
        {
            List<PSemicolonValue> copy = new ArrayList<PSemicolonValue>(node.getAdditionalValues());
            Collections.reverse(copy);
            for(PSemicolonValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAColumn(node);
    }

    public void inARow(ARow node)
    {
        defaultIn(node);
    }

    public void outARow(ARow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARow(ARow node)
    {
        inARow(node);
        {
            List<PCommaValue> copy = new ArrayList<PCommaValue>(node.getAdditionalValues());
            Collections.reverse(copy);
            for(PCommaValue e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outARow(node);
    }

    public void inACommaValue(ACommaValue node)
    {
        defaultIn(node);
    }

    public void outACommaValue(ACommaValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaValue(ACommaValue node)
    {
        inACommaValue(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaValue(node);
    }

    public void inASemicolonValue(ASemicolonValue node)
    {
        defaultIn(node);
    }

    public void outASemicolonValue(ASemicolonValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonValue(ASemicolonValue node)
    {
        inASemicolonValue(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonValue(node);
    }

    public void inASemicolonRow(ASemicolonRow node)
    {
        defaultIn(node);
    }

    public void outASemicolonRow(ASemicolonRow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonRow(ASemicolonRow node)
    {
        inASemicolonRow(node);
        if(node.getRow() != null)
        {
            node.getRow().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonRow(node);
    }

    public void inATrueBoolean(ATrueBoolean node)
    {
        defaultIn(node);
    }

    public void outATrueBoolean(ATrueBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBoolean(ATrueBoolean node)
    {
        inATrueBoolean(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBoolean(node);
    }

    public void inAFalseBoolean(AFalseBoolean node)
    {
        defaultIn(node);
    }

    public void outAFalseBoolean(AFalseBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBoolean(AFalseBoolean node)
    {
        inAFalseBoolean(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBoolean(node);
    }
}
