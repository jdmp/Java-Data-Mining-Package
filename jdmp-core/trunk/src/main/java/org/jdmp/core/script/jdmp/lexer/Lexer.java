/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.script.jdmp.lexer;

import java.io.*;
import org.jdmp.core.script.jdmp.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhiteSpace(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTraditionalComment(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocumentationComment(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndOfLineComment(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMatlabComment(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTrue(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFalse(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNull(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParenthese(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParenthese(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrace(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrace(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBracket(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBracket(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAssign(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLt(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGt(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComplement(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBitComplement(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TQuestion(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColon(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEq(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLteq(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGteq(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNeq(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPlus(line, pos); }
    Token new29(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMinus(line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStar(line, pos); }
    Token new31(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDiv(line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInteger(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFloatingPoint(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TChar(text, line, pos); }
    Token new35(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(text, line, pos); }
    Token new36(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {33, 33, 6}, {34, 34, 7}, {36, 36, 8}, {37, 37, 9}, {39, 39, 10}, {40, 40, 11}, {41, 41, 12}, {42, 42, 13}, {43, 43, 14}, {44, 44, 15}, {45, 45, 16}, {46, 46, 17}, {47, 47, 18}, {48, 48, 19}, {49, 57, 20}, {58, 58, 21}, {59, 59, 22}, {60, 60, 23}, {61, 61, 24}, {62, 62, 25}, {63, 63, 26}, {65, 72, 27}, {73, 73, 28}, {74, 77, 27}, {78, 78, 29}, {79, 90, 27}, {91, 91, 30}, {93, 93, 31}, {95, 95, 32}, {97, 101, 33}, {102, 102, 34}, {103, 104, 33}, {105, 105, 35}, {106, 109, 33}, {110, 110, 36}, {111, 115, 33}, {116, 116, 37}, {117, 122, 33}, {123, 123, 38}, {125, 125, 39}, {126, 126, 40}, {170, 170, 41}, {181, 181, 42}, {186, 186, 43}, {192, 214, 44}, {216, 246, 45}, {248, 501, 46}, {506, 535, 47}, {592, 680, 48}, {688, 696, 49}, {699, 705, 50}, {720, 721, 51}, {736, 740, 52}, {890, 890, 53}, {902, 902, 54}, {904, 906, 55}, {908, 908, 56}, {910, 929, 57}, {931, 974, 58}, {976, 982, 59}, {986, 986, 60}, {988, 988, 61}, {990, 990, 62}, {992, 992, 63}, {994, 1011, 64}, {1025, 1036, 65}, {1038, 1103, 66}, {1105, 1116, 67}, {1118, 1153, 68}, {1168, 1220, 69}, {1223, 1224, 70}, {1227, 1228, 71}, {1232, 1259, 72}, {1262, 1269, 73}, {1272, 1273, 74}, {1329, 1366, 75}, {1369, 1369, 76}, {1377, 1415, 77}, {1488, 1514, 78}, {1520, 1522, 79}, {1569, 1594, 80}, {1600, 1610, 81}, {1649, 1719, 82}, {1722, 1726, 83}, {1728, 1742, 84}, {1744, 1747, 85}, {1749, 1749, 86}, {1765, 1766, 87}, {2309, 2361, 88}, {2365, 2365, 89}, {2392, 2401, 90}, {2437, 2444, 91}, {2447, 2448, 92}, {2451, 2472, 93}, {2474, 2480, 94}, {2482, 2482, 95}, {2486, 2489, 96}, {2524, 2525, 97}, {2527, 2529, 98}, {2544, 2545, 99}, {2565, 2570, 100}, {2575, 2576, 101}, {2579, 2600, 102}, {2602, 2608, 103}, {2610, 2611, 104}, {2613, 2614, 105}, {2616, 2617, 106}, {2649, 2652, 107}, {2654, 2654, 108}, {2674, 2676, 109}, {2693, 2699, 110}, {2701, 2701, 111}, {2703, 2705, 112}, {2707, 2728, 113}, {2730, 2736, 114}, {2738, 2739, 115}, {2741, 2745, 116}, {2749, 2749, 117}, {2784, 2784, 118}, {2821, 2828, 119}, {2831, 2832, 120}, {2835, 2856, 121}, {2858, 2864, 122}, {2866, 2867, 123}, {2870, 2873, 124}, {2877, 2877, 125}, {2908, 2909, 126}, {2911, 2913, 127}, {2949, 2954, 128}, {2958, 2960, 129}, {2962, 2965, 130}, {2969, 2970, 131}, {2972, 2972, 132}, {2974, 2975, 133}, {2979, 2980, 134}, {2984, 2986, 135}, {2990, 2997, 136}, {2999, 3001, 137}, {3077, 3084, 138}, {3086, 3088, 139}, {3090, 3112, 140}, {3114, 3123, 141}, {3125, 3129, 142}, {3168, 3169, 143}, {3205, 3212, 144}, {3214, 3216, 145}, {3218, 3240, 146}, {3242, 3251, 147}, {3253, 3257, 148}, {3294, 3294, 149}, {3296, 3297, 150}, {3333, 3340, 151}, {3342, 3344, 152}, {3346, 3368, 153}, {3370, 3385, 154}, {3424, 3425, 155}, {3585, 3630, 156}, {3632, 3632, 157}, {3634, 3635, 158}, {3648, 3654, 159}, {3713, 3714, 160}, {3716, 3716, 161}, {3719, 3720, 162}, {3722, 3722, 163}, {3725, 3725, 164}, {3732, 3735, 165}, {3737, 3743, 166}, {3745, 3747, 167}, {3749, 3749, 168}, {3751, 3751, 169}, {3754, 3755, 170}, {3757, 3758, 171}, {3760, 3760, 172}, {3762, 3763, 173}, {3773, 3773, 174}, {3776, 3780, 175}, {3782, 3782, 176}, {3804, 3805, 177}, {3904, 3911, 178}, {3913, 3945, 179}, {4256, 4293, 180}, {4304, 4342, 181}, {4352, 4441, 182}, {4447, 4514, 183}, {4520, 4601, 184}, {7680, 7835, 185}, {7840, 7929, 186}, {7936, 7957, 187}, {7960, 7965, 188}, {7968, 8005, 189}, {8008, 8013, 190}, {8016, 8023, 191}, {8025, 8025, 192}, {8027, 8027, 193}, {8029, 8029, 194}, {8031, 8061, 195}, {8064, 8116, 196}, {8118, 8124, 197}, {8126, 8126, 198}, {8130, 8132, 199}, {8134, 8140, 200}, {8144, 8147, 201}, {8150, 8155, 202}, {8160, 8172, 203}, {8178, 8180, 204}, {8182, 8188, 205}, {8319, 8319, 206}, {8450, 8450, 207}, {8455, 8455, 208}, {8458, 8467, 209}, {8469, 8469, 210}, {8472, 8477, 211}, {8484, 8484, 212}, {8486, 8486, 213}, {8488, 8488, 214}, {8490, 8497, 215}, {8499, 8504, 216}, {12293, 12293, 217}, {12337, 12341, 218}, {12353, 12436, 219}, {12443, 12446, 220}, {12449, 12538, 221}, {12540, 12542, 222}, {12549, 12588, 223}, {12593, 12686, 224}, {19968, 40869, 225}, {44032, 55203, 226}, {63744, 64045, 227}, {64256, 64262, 228}, {64275, 64279, 229}, {64287, 64296, 230}, {64298, 64310, 231}, {64312, 64316, 232}, {64318, 64318, 233}, {64320, 64321, 234}, {64323, 64324, 235}, {64326, 64433, 236}, {64467, 64829, 237}, {64848, 64911, 238}, {64914, 64967, 239}, {65008, 65019, 240}, {65136, 65138, 241}, {65140, 65140, 242}, {65142, 65276, 243}, {65313, 65338, 244}, {65345, 65370, 245}, {65382, 65470, 246}, {65474, 65479, 247}, {65482, 65487, 248}, {65490, 65495, 249}, {65498, 65500, 250}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 251}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{61, 61, 252}, },
            {{0, 9, 253}, {11, 12, 253}, {14, 33, 253}, {34, 34, 254}, {35, 91, 253}, {92, 92, 255}, {93, 65535, 253}, },
            {{36, 36, 256}, {48, 57, 257}, {65, 90, 258}, {95, 95, 259}, {97, 122, 260}, {170, 170, 261}, {181, 181, 262}, {186, 186, 263}, {192, 214, 264}, {216, 246, 265}, {248, 501, 266}, {506, 535, 267}, {592, 680, 268}, {688, 696, 269}, {699, 705, 270}, {720, 721, 271}, {736, 740, 272}, {890, 890, 273}, {902, 902, 274}, {904, 906, 275}, {908, 908, 276}, {910, 929, 277}, {931, 974, 278}, {976, 982, 279}, {986, 986, 280}, {988, 988, 281}, {990, 990, 282}, {992, 992, 283}, {994, 1011, 284}, {1025, 1036, 285}, {1038, 1103, 286}, {1105, 1116, 287}, {1118, 1153, 288}, {1168, 1220, 289}, {1223, 1224, 290}, {1227, 1228, 291}, {1232, 1259, 292}, {1262, 1269, 293}, {1272, 1273, 294}, {1329, 1366, 295}, {1369, 1369, 296}, {1377, 1415, 297}, {1488, 1514, 298}, {1520, 1522, 299}, {1569, 1594, 300}, {1600, 1610, 301}, {1632, 1641, 302}, {1649, 1719, 303}, {1722, 1726, 304}, {1728, 1742, 305}, {1744, 1747, 306}, {1749, 1749, 307}, {1765, 1766, 308}, {1776, 1785, 309}, {2309, 2361, 310}, {2365, 2365, 311}, {2392, 2401, 312}, {2406, 2415, 313}, {2437, 2444, 314}, {2447, 2448, 315}, {2451, 2472, 316}, {2474, 2480, 317}, {2482, 2482, 318}, {2486, 2489, 319}, {2524, 2525, 320}, {2527, 2529, 321}, {2534, 2543, 322}, {2544, 2545, 323}, {2565, 2570, 324}, {2575, 2576, 325}, {2579, 2600, 326}, {2602, 2608, 327}, {2610, 2611, 328}, {2613, 2614, 329}, {2616, 2617, 330}, {2649, 2652, 331}, {2654, 2654, 332}, {2662, 2671, 333}, {2674, 2676, 334}, {2693, 2699, 335}, {2701, 2701, 336}, {2703, 2705, 337}, {2707, 2728, 338}, {2730, 2736, 339}, {2738, 2739, 340}, {2741, 2745, 341}, {2749, 2749, 342}, {2784, 2784, 343}, {2790, 2799, 344}, {2821, 2828, 345}, {2831, 2832, 346}, {2835, 2856, 347}, {2858, 2864, 348}, {2866, 2867, 349}, {2870, 2873, 350}, {2877, 2877, 351}, {2908, 2909, 352}, {2911, 2913, 353}, {2918, 2927, 354}, {2949, 2954, 355}, {2958, 2960, 356}, {2962, 2965, 357}, {2969, 2970, 358}, {2972, 2972, 359}, {2974, 2975, 360}, {2979, 2980, 361}, {2984, 2986, 362}, {2990, 2997, 363}, {2999, 3001, 364}, {3047, 3055, 365}, {3077, 3084, 366}, {3086, 3088, 367}, {3090, 3112, 368}, {3114, 3123, 369}, {3125, 3129, 370}, {3168, 3169, 371}, {3174, 3183, 372}, {3205, 3212, 373}, {3214, 3216, 374}, {3218, 3240, 375}, {3242, 3251, 376}, {3253, 3257, 377}, {3294, 3294, 378}, {3296, 3297, 379}, {3302, 3311, 380}, {3333, 3340, 381}, {3342, 3344, 382}, {3346, 3368, 383}, {3370, 3385, 384}, {3424, 3425, 385}, {3430, 3439, 386}, {3585, 3630, 387}, {3632, 3632, 388}, {3634, 3635, 389}, {3648, 3654, 390}, {3664, 3673, 391}, {3713, 3714, 392}, {3716, 3716, 393}, {3719, 3720, 394}, {3722, 3722, 395}, {3725, 3725, 396}, {3732, 3735, 397}, {3737, 3743, 398}, {3745, 3747, 399}, {3749, 3749, 400}, {3751, 3751, 401}, {3754, 3755, 402}, {3757, 3758, 403}, {3760, 3760, 404}, {3762, 3763, 405}, {3773, 3773, 406}, {3776, 3780, 407}, {3782, 3782, 408}, {3792, 3801, 409}, {3804, 3805, 410}, {3872, 3881, 411}, {3904, 3911, 412}, {3913, 3945, 413}, {4256, 4293, 414}, {4304, 4342, 415}, {4352, 4441, 416}, {4447, 4514, 417}, {4520, 4601, 418}, {7680, 7835, 419}, {7840, 7929, 420}, {7936, 7957, 421}, {7960, 7965, 422}, {7968, 8005, 423}, {8008, 8013, 424}, {8016, 8023, 425}, {8025, 8025, 426}, {8027, 8027, 427}, {8029, 8029, 428}, {8031, 8061, 429}, {8064, 8116, 430}, {8118, 8124, 431}, {8126, 8126, 432}, {8130, 8132, 433}, {8134, 8140, 434}, {8144, 8147, 435}, {8150, 8155, 436}, {8160, 8172, 437}, {8178, 8180, 438}, {8182, 8188, 439}, {8319, 8319, 440}, {8450, 8450, 441}, {8455, 8455, 442}, {8458, 8467, 443}, {8469, 8469, 444}, {8472, 8477, 445}, {8484, 8484, 446}, {8486, 8486, 447}, {8488, 8488, 448}, {8490, 8497, 449}, {8499, 8504, 450}, {12293, 12293, 451}, {12337, 12341, 452}, {12353, 12436, 453}, {12443, 12446, 454}, {12449, 12538, 455}, {12540, 12542, 456}, {12549, 12588, 457}, {12593, 12686, 458}, {19968, 40869, 459}, {44032, 55203, 460}, {63744, 64045, 461}, {64256, 64262, 462}, {64275, 64279, 463}, {64287, 64296, 464}, {64298, 64310, 465}, {64312, 64316, 466}, {64318, 64318, 467}, {64320, 64321, 468}, {64323, 64324, 469}, {64326, 64433, 470}, {64467, 64829, 471}, {64848, 64911, 472}, {64914, 64967, 473}, {65008, 65019, 474}, {65136, 65138, 475}, {65140, 65140, 476}, {65142, 65276, 477}, {65296, 65305, 478}, {65313, 65338, 479}, {65345, 65370, 480}, {65382, 65470, 481}, {65474, 65479, 482}, {65482, 65487, 483}, {65490, 65495, 484}, {65498, 65500, 485}, },
            {{0, 9, 486}, {10, 10, 487}, {11, 12, 486}, {13, 13, 488}, {14, 65535, 486}, },
            {{0, 9, 489}, {11, 12, 489}, {14, 38, 489}, {39, 39, 490}, {40, 91, 489}, {93, 65535, 489}, },
            {},
            {},
            {},
            {},
            {},
            {{73, 73, 491}, {105, 105, 492}, },
            {{48, 57, 493}, },
            {{42, 42, 494}, {47, 47, 495}, },
            {{46, 46, 496}, {48, 57, 497}, {68, 68, 498}, {69, 69, 499}, {70, 70, 500}, {76, 76, 501}, {100, 100, 502}, {101, 101, 503}, {102, 102, 504}, {108, 108, 505}, },
            {{46, 46, 496}, {48, 57, 506}, {68, 108, -21}, },
            {},
            {},
            {{61, 61, 507}, },
            {{61, 61, 508}, },
            {{61, 61, 509}, },
            {},
            {{36, 65500, -10}, },
            {{36, 95, -10}, {97, 109, 260}, {110, 110, 510}, {111, 122, 260}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 97, 511}, {98, 122, 260}, {170, 65500, -10}, },
            {},
            {},
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 95, -10}, {97, 97, 512}, {98, 65500, -31}, },
            {{36, 109, -30}, {110, 110, 513}, {111, 65500, -30}, },
            {{36, 95, -10}, {97, 97, 514}, {98, 116, 260}, {117, 117, 515}, {118, 122, 260}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 113, 260}, {114, 114, 516}, {115, 122, 260}, {170, 65500, -10}, },
            {},
            {},
            {},
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{9, 32, -2}, },
            {},
            {{0, 65535, -9}, },
            {},
            {{34, 34, 517}, {39, 39, 518}, {48, 51, 519}, {52, 55, 520}, {92, 92, 521}, {98, 98, 522}, {102, 102, 523}, {110, 110, 524}, {114, 114, 525}, {116, 116, 526}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{0, 65535, -11}, },
            {},
            {{10, 10, 527}, },
            {{0, 65535, -12}, },
            {},
            {{110, 110, 528}, },
            {{110, 110, 529}, },
            {{48, 57, 493}, {68, 68, 530}, {69, 69, 531}, {70, 70, 532}, {100, 100, 533}, {101, 101, 534}, {102, 102, 535}, },
            {{0, 9, 536}, {10, 10, 537}, {11, 12, 536}, {13, 13, 538}, {14, 41, 536}, {42, 42, 539}, {43, 65535, 536}, },
            {{0, 9, 540}, {10, 10, 541}, {11, 12, 540}, {13, 13, 542}, {14, 65535, 540}, },
            {{48, 57, 543}, {68, 68, 544}, {69, 69, 545}, {70, 70, 546}, {100, 100, 547}, {101, 101, 548}, {102, 102, 549}, },
            {{46, 70, -21}, {100, 102, -21}, },
            {},
            {{43, 43, 550}, {45, 45, 551}, {48, 57, 552}, },
            {},
            {},
            {},
            {{43, 57, -501}, },
            {},
            {},
            {{46, 108, -22}, },
            {},
            {},
            {},
            {{36, 95, -10}, {97, 101, 260}, {102, 102, 553}, {103, 122, 260}, {170, 65500, -10}, },
            {{36, 57, -10}, {65, 77, 258}, {78, 78, 554}, {79, 90, 258}, {95, 65500, -10}, },
            {{36, 95, -10}, {97, 107, 260}, {108, 108, 555}, {109, 122, 260}, {170, 65500, -10}, },
            {{36, 101, -512}, {102, 102, 556}, {103, 65500, -512}, },
            {{36, 109, -30}, {110, 110, 557}, {111, 65500, -30}, },
            {{36, 107, -514}, {108, 108, 558}, {109, 65500, -514}, },
            {{36, 95, -10}, {97, 116, 260}, {117, 117, 559}, {118, 65500, -38}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 34, -9}, {35, 47, 253}, {48, 55, 560}, {56, 91, 253}, {92, 65535, -9}, },
            {{0, 47, -521}, {48, 55, 561}, {56, 65535, -521}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {},
            {{102, 102, 562}, },
            {{102, 102, 563}, },
            {},
            {{43, 43, 564}, {45, 45, 565}, {48, 57, 566}, },
            {},
            {},
            {{43, 57, -533}, },
            {},
            {{0, 41, -496}, {42, 42, 567}, {43, 65535, 536}, },
            {{0, 65535, -538}, },
            {{0, 9, 536}, {10, 10, 568}, {11, 65535, -538}, },
            {{0, 9, 569}, {10, 10, 570}, {11, 12, 569}, {13, 13, 571}, {14, 41, 569}, {42, 42, 572}, {43, 46, 569}, {47, 47, 573}, {48, 65535, 569}, },
            {{0, 65535, -497}, },
            {},
            {{10, 10, 574}, },
            {{48, 102, -498}, },
            {},
            {{43, 43, 575}, {45, 45, 576}, {48, 57, 577}, },
            {},
            {},
            {{43, 57, -547}, },
            {},
            {{48, 57, 552}, },
            {{48, 57, 552}, },
            {{48, 57, 552}, {68, 68, 578}, {70, 70, 579}, {100, 100, 580}, {102, 102, 581}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 95, -10}, {97, 114, 260}, {115, 115, 582}, {116, 122, 260}, {170, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 107, -514}, {108, 108, 583}, {109, 65500, -514}, },
            {{36, 95, -10}, {97, 100, 260}, {101, 101, 584}, {102, 122, 260}, {170, 65500, -10}, },
            {{0, 47, -521}, {48, 55, 585}, {56, 65535, -521}, },
            {{0, 65535, -9}, },
            {},
            {},
            {{48, 57, 566}, },
            {{48, 57, 566}, },
            {{48, 57, 566}, {68, 68, 530}, {70, 100, -495}, {102, 102, 535}, },
            {{0, 9, 586}, {10, 10, 587}, {11, 12, 586}, {13, 13, 588}, {14, 41, 586}, {42, 42, 567}, {43, 46, 586}, {47, 47, 589}, {48, 65535, 586}, },
            {{0, 65535, -538}, },
            {{0, 9, 590}, {10, 10, 591}, {11, 12, 590}, {13, 13, 592}, {14, 41, 590}, {42, 42, 593}, {43, 65535, 590}, },
            {{0, 65535, -571}, },
            {{0, 9, 590}, {10, 10, 594}, {11, 65535, -571}, },
            {{0, 65535, -541}, },
            {},
            {},
            {{48, 57, 577}, },
            {{48, 57, 577}, },
            {{48, 57, 577}, {68, 68, 544}, {70, 100, -498}, {102, 102, 549}, },
            {},
            {},
            {},
            {},
            {{36, 100, -561}, {101, 101, 595}, {102, 65500, -561}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{0, 65535, -9}, },
            {{0, 9, 596}, {10, 10, 597}, {11, 12, 596}, {13, 13, 598}, {14, 41, 596}, {42, 42, 599}, {43, 65535, 596}, },
            {{0, 65535, -588}, },
            {{0, 9, 596}, {10, 10, 600}, {11, 65535, -588}, },
            {},
            {{0, 65535, -571}, },
            {{0, 65535, -571}, },
            {{0, 9, 590}, {10, 10, 601}, {11, 65535, -571}, },
            {{0, 41, -541}, {42, 42, 593}, {43, 65535, -541}, },
            {{0, 65535, -571}, },
            {{36, 65500, -10}, },
            {{0, 65535, -588}, },
            {{0, 65535, -588}, },
            {{0, 9, 596}, {10, 10, 602}, {11, 65535, -588}, },
            {{0, 41, -569}, {42, 42, 599}, {43, 65535, -569}, },
            {{0, 65535, -588}, },
            {{0, 65535, -571}, },
            {{0, 65535, -588}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {0, 0, 0, 0, 0, 0, 20, -1, 36, 4, -1, 8, 9, 30, 28, 15, 29, 16, 31, 32, 32, 23, 14, 18, 17, 19, 22, 36, 36, 36, 12, 13, 36, 36, 36, 36, 36, 36, 10, 11, 21, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 0, 27, -1, 35, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 4, 4, 4, -1, 34, -1, -1, 33, -1, 3, 33, -1, 33, -1, 33, 32, 33, -1, 33, 32, 32, 25, 24, 26, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 33, -1, 33, 33, -1, 33, -1, -1, -1, -1, 3, 3, 3, 33, 33, -1, 33, 33, -1, 33, -1, -1, 33, 33, 33, 36, 33, 33, 36, 36, -1, -1, 33, 33, -1, -1, 33, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, 33, 33, 33, 33, 33, 36, 7, 5, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
