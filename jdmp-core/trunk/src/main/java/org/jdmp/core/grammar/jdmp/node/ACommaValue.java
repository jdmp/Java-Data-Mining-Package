/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.grammar.jdmp.node;

import org.jdmp.core.grammar.jdmp.analysis.*;

@SuppressWarnings("nls")
public final class ACommaValue extends PCommaValue
{
    private TCommaToken _commaToken_;
    private PValue _value_;

    public ACommaValue()
    {
        // Constructor
    }

    public ACommaValue(
        @SuppressWarnings("hiding") TCommaToken _commaToken_,
        @SuppressWarnings("hiding") PValue _value_)
    {
        // Constructor
        setCommaToken(_commaToken_);

        setValue(_value_);

    }

    @Override
    public Object clone()
    {
        return new ACommaValue(
            cloneNode(this._commaToken_),
            cloneNode(this._value_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACommaValue(this);
    }

    public TCommaToken getCommaToken()
    {
        return this._commaToken_;
    }

    public void setCommaToken(TCommaToken node)
    {
        if(this._commaToken_ != null)
        {
            this._commaToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._commaToken_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._commaToken_)
            + toString(this._value_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._commaToken_ == child)
        {
            this._commaToken_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._commaToken_ == oldChild)
        {
            setCommaToken((TCommaToken) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
