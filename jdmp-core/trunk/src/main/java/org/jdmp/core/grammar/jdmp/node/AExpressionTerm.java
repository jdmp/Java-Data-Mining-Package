/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.grammar.jdmp.node;

import org.jdmp.core.grammar.jdmp.analysis.*;

@SuppressWarnings("nls")
public final class AExpressionTerm extends PTerm
{
    private TLParToken _lParToken_;
    private PExpression _expression_;
    private TRParToken _rParToken_;

    public AExpressionTerm()
    {
        // Constructor
    }

    public AExpressionTerm(
        @SuppressWarnings("hiding") TLParToken _lParToken_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TRParToken _rParToken_)
    {
        // Constructor
        setLParToken(_lParToken_);

        setExpression(_expression_);

        setRParToken(_rParToken_);

    }

    @Override
    public Object clone()
    {
        return new AExpressionTerm(
            cloneNode(this._lParToken_),
            cloneNode(this._expression_),
            cloneNode(this._rParToken_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpressionTerm(this);
    }

    public TLParToken getLParToken()
    {
        return this._lParToken_;
    }

    public void setLParToken(TLParToken node)
    {
        if(this._lParToken_ != null)
        {
            this._lParToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParToken_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TRParToken getRParToken()
    {
        return this._rParToken_;
    }

    public void setRParToken(TRParToken node)
    {
        if(this._rParToken_ != null)
        {
            this._rParToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lParToken_)
            + toString(this._expression_)
            + toString(this._rParToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lParToken_ == child)
        {
            this._lParToken_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._rParToken_ == child)
        {
            this._rParToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lParToken_ == oldChild)
        {
            setLParToken((TLParToken) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._rParToken_ == oldChild)
        {
            setRParToken((TRParToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
