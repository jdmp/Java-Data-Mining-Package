/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.grammar.jdmp.lexer;

import java.io.*;
import org.jdmp.core.grammar.jdmp.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolonToken(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPlusToken(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMinusToken(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMultiplicationToken(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDivisionToken(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCommaToken(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEqualsToken(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParToken(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParToken(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBracketToken(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBracketToken(line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNullToken(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNewToken(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTrueToken(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFalseToken(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifierToken(text, line, pos); }
    Token new16(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIntegerToken(text, line, pos); }
    Token new17(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFloatingPointToken(text, line, pos); }
    Token new18(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBooleanToken(text, line, pos); }
    Token new19(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCharacterToken(text, line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStringToken(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhiteSpaceToken(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTraditionalCommentToken(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocumentationCommentToken(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndOfLineCommentToken(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMatlabCommentToken(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {34, 34, 6}, {36, 36, 7}, {37, 37, 8}, {39, 39, 9}, {40, 40, 10}, {41, 41, 11}, {42, 42, 12}, {43, 43, 13}, {44, 44, 14}, {45, 45, 15}, {46, 46, 16}, {47, 47, 17}, {48, 48, 18}, {49, 57, 19}, {59, 59, 20}, {61, 61, 21}, {65, 69, 22}, {70, 70, 23}, {71, 77, 22}, {78, 78, 24}, {79, 83, 22}, {84, 84, 25}, {85, 90, 22}, {91, 91, 26}, {93, 93, 27}, {95, 95, 28}, {97, 101, 29}, {102, 102, 30}, {103, 109, 29}, {110, 110, 31}, {111, 115, 29}, {116, 116, 32}, {117, 122, 29}, {170, 170, 33}, {181, 181, 34}, {186, 186, 35}, {192, 214, 36}, {216, 246, 37}, {248, 501, 38}, {506, 535, 39}, {592, 680, 40}, {688, 696, 41}, {699, 705, 42}, {720, 721, 43}, {736, 740, 44}, {890, 890, 45}, {902, 902, 46}, {904, 906, 47}, {908, 908, 48}, {910, 929, 49}, {931, 974, 50}, {976, 982, 51}, {986, 986, 52}, {988, 988, 53}, {990, 990, 54}, {992, 992, 55}, {994, 1011, 56}, {1025, 1036, 57}, {1038, 1103, 58}, {1105, 1116, 59}, {1118, 1153, 60}, {1168, 1220, 61}, {1223, 1224, 62}, {1227, 1228, 63}, {1232, 1259, 64}, {1262, 1269, 65}, {1272, 1273, 66}, {1329, 1366, 67}, {1369, 1369, 68}, {1377, 1415, 69}, {1488, 1514, 70}, {1520, 1522, 71}, {1569, 1594, 72}, {1600, 1610, 73}, {1649, 1719, 74}, {1722, 1726, 75}, {1728, 1742, 76}, {1744, 1747, 77}, {1749, 1749, 78}, {1765, 1766, 79}, {2309, 2361, 80}, {2365, 2365, 81}, {2392, 2401, 82}, {2437, 2444, 83}, {2447, 2448, 84}, {2451, 2472, 85}, {2474, 2480, 86}, {2482, 2482, 87}, {2486, 2489, 88}, {2524, 2525, 89}, {2527, 2529, 90}, {2544, 2545, 91}, {2565, 2570, 92}, {2575, 2576, 93}, {2579, 2600, 94}, {2602, 2608, 95}, {2610, 2611, 96}, {2613, 2614, 97}, {2616, 2617, 98}, {2649, 2652, 99}, {2654, 2654, 100}, {2674, 2676, 101}, {2693, 2699, 102}, {2701, 2701, 103}, {2703, 2705, 104}, {2707, 2728, 105}, {2730, 2736, 106}, {2738, 2739, 107}, {2741, 2745, 108}, {2749, 2749, 109}, {2784, 2784, 110}, {2821, 2828, 111}, {2831, 2832, 112}, {2835, 2856, 113}, {2858, 2864, 114}, {2866, 2867, 115}, {2870, 2873, 116}, {2877, 2877, 117}, {2908, 2909, 118}, {2911, 2913, 119}, {2949, 2954, 120}, {2958, 2960, 121}, {2962, 2965, 122}, {2969, 2970, 123}, {2972, 2972, 124}, {2974, 2975, 125}, {2979, 2980, 126}, {2984, 2986, 127}, {2990, 2997, 128}, {2999, 3001, 129}, {3077, 3084, 130}, {3086, 3088, 131}, {3090, 3112, 132}, {3114, 3123, 133}, {3125, 3129, 134}, {3168, 3169, 135}, {3205, 3212, 136}, {3214, 3216, 137}, {3218, 3240, 138}, {3242, 3251, 139}, {3253, 3257, 140}, {3294, 3294, 141}, {3296, 3297, 142}, {3333, 3340, 143}, {3342, 3344, 144}, {3346, 3368, 145}, {3370, 3385, 146}, {3424, 3425, 147}, {3585, 3630, 148}, {3632, 3632, 149}, {3634, 3635, 150}, {3648, 3654, 151}, {3713, 3714, 152}, {3716, 3716, 153}, {3719, 3720, 154}, {3722, 3722, 155}, {3725, 3725, 156}, {3732, 3735, 157}, {3737, 3743, 158}, {3745, 3747, 159}, {3749, 3749, 160}, {3751, 3751, 161}, {3754, 3755, 162}, {3757, 3758, 163}, {3760, 3760, 164}, {3762, 3763, 165}, {3773, 3773, 166}, {3776, 3780, 167}, {3782, 3782, 168}, {3804, 3805, 169}, {3904, 3911, 170}, {3913, 3945, 171}, {4256, 4293, 172}, {4304, 4342, 173}, {4352, 4441, 174}, {4447, 4514, 175}, {4520, 4601, 176}, {7680, 7835, 177}, {7840, 7929, 178}, {7936, 7957, 179}, {7960, 7965, 180}, {7968, 8005, 181}, {8008, 8013, 182}, {8016, 8023, 183}, {8025, 8025, 184}, {8027, 8027, 185}, {8029, 8029, 186}, {8031, 8061, 187}, {8064, 8116, 188}, {8118, 8124, 189}, {8126, 8126, 190}, {8130, 8132, 191}, {8134, 8140, 192}, {8144, 8147, 193}, {8150, 8155, 194}, {8160, 8172, 195}, {8178, 8180, 196}, {8182, 8188, 197}, {8319, 8319, 198}, {8450, 8450, 199}, {8455, 8455, 200}, {8458, 8467, 201}, {8469, 8469, 202}, {8472, 8477, 203}, {8484, 8484, 204}, {8486, 8486, 205}, {8488, 8488, 206}, {8490, 8497, 207}, {8499, 8504, 208}, {12293, 12293, 209}, {12337, 12341, 210}, {12353, 12436, 211}, {12443, 12446, 212}, {12449, 12538, 213}, {12540, 12542, 214}, {12549, 12588, 215}, {12593, 12686, 216}, {19968, 40869, 217}, {44032, 55203, 218}, {63744, 64045, 219}, {64256, 64262, 220}, {64275, 64279, 221}, {64287, 64296, 222}, {64298, 64310, 223}, {64312, 64316, 224}, {64318, 64318, 225}, {64320, 64321, 226}, {64323, 64324, 227}, {64326, 64433, 228}, {64467, 64829, 229}, {64848, 64911, 230}, {64914, 64967, 231}, {65008, 65019, 232}, {65136, 65138, 233}, {65140, 65140, 234}, {65142, 65276, 235}, {65313, 65338, 236}, {65345, 65370, 237}, {65382, 65470, 238}, {65474, 65479, 239}, {65482, 65487, 240}, {65490, 65495, 241}, {65498, 65500, 242}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 243}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{0, 9, 244}, {11, 12, 244}, {14, 33, 244}, {34, 34, 245}, {35, 91, 244}, {92, 92, 246}, {93, 65535, 244}, },
            {{36, 36, 247}, {48, 57, 248}, {65, 90, 249}, {95, 95, 250}, {97, 122, 251}, {170, 170, 252}, {181, 181, 253}, {186, 186, 254}, {192, 214, 255}, {216, 246, 256}, {248, 501, 257}, {506, 535, 258}, {592, 680, 259}, {688, 696, 260}, {699, 705, 261}, {720, 721, 262}, {736, 740, 263}, {890, 890, 264}, {902, 902, 265}, {904, 906, 266}, {908, 908, 267}, {910, 929, 268}, {931, 974, 269}, {976, 982, 270}, {986, 986, 271}, {988, 988, 272}, {990, 990, 273}, {992, 992, 274}, {994, 1011, 275}, {1025, 1036, 276}, {1038, 1103, 277}, {1105, 1116, 278}, {1118, 1153, 279}, {1168, 1220, 280}, {1223, 1224, 281}, {1227, 1228, 282}, {1232, 1259, 283}, {1262, 1269, 284}, {1272, 1273, 285}, {1329, 1366, 286}, {1369, 1369, 287}, {1377, 1415, 288}, {1488, 1514, 289}, {1520, 1522, 290}, {1569, 1594, 291}, {1600, 1610, 292}, {1632, 1641, 293}, {1649, 1719, 294}, {1722, 1726, 295}, {1728, 1742, 296}, {1744, 1747, 297}, {1749, 1749, 298}, {1765, 1766, 299}, {1776, 1785, 300}, {2309, 2361, 301}, {2365, 2365, 302}, {2392, 2401, 303}, {2406, 2415, 304}, {2437, 2444, 305}, {2447, 2448, 306}, {2451, 2472, 307}, {2474, 2480, 308}, {2482, 2482, 309}, {2486, 2489, 310}, {2524, 2525, 311}, {2527, 2529, 312}, {2534, 2543, 313}, {2544, 2545, 314}, {2565, 2570, 315}, {2575, 2576, 316}, {2579, 2600, 317}, {2602, 2608, 318}, {2610, 2611, 319}, {2613, 2614, 320}, {2616, 2617, 321}, {2649, 2652, 322}, {2654, 2654, 323}, {2662, 2671, 324}, {2674, 2676, 325}, {2693, 2699, 326}, {2701, 2701, 327}, {2703, 2705, 328}, {2707, 2728, 329}, {2730, 2736, 330}, {2738, 2739, 331}, {2741, 2745, 332}, {2749, 2749, 333}, {2784, 2784, 334}, {2790, 2799, 335}, {2821, 2828, 336}, {2831, 2832, 337}, {2835, 2856, 338}, {2858, 2864, 339}, {2866, 2867, 340}, {2870, 2873, 341}, {2877, 2877, 342}, {2908, 2909, 343}, {2911, 2913, 344}, {2918, 2927, 345}, {2949, 2954, 346}, {2958, 2960, 347}, {2962, 2965, 348}, {2969, 2970, 349}, {2972, 2972, 350}, {2974, 2975, 351}, {2979, 2980, 352}, {2984, 2986, 353}, {2990, 2997, 354}, {2999, 3001, 355}, {3047, 3055, 356}, {3077, 3084, 357}, {3086, 3088, 358}, {3090, 3112, 359}, {3114, 3123, 360}, {3125, 3129, 361}, {3168, 3169, 362}, {3174, 3183, 363}, {3205, 3212, 364}, {3214, 3216, 365}, {3218, 3240, 366}, {3242, 3251, 367}, {3253, 3257, 368}, {3294, 3294, 369}, {3296, 3297, 370}, {3302, 3311, 371}, {3333, 3340, 372}, {3342, 3344, 373}, {3346, 3368, 374}, {3370, 3385, 375}, {3424, 3425, 376}, {3430, 3439, 377}, {3585, 3630, 378}, {3632, 3632, 379}, {3634, 3635, 380}, {3648, 3654, 381}, {3664, 3673, 382}, {3713, 3714, 383}, {3716, 3716, 384}, {3719, 3720, 385}, {3722, 3722, 386}, {3725, 3725, 387}, {3732, 3735, 388}, {3737, 3743, 389}, {3745, 3747, 390}, {3749, 3749, 391}, {3751, 3751, 392}, {3754, 3755, 393}, {3757, 3758, 394}, {3760, 3760, 395}, {3762, 3763, 396}, {3773, 3773, 397}, {3776, 3780, 398}, {3782, 3782, 399}, {3792, 3801, 400}, {3804, 3805, 401}, {3872, 3881, 402}, {3904, 3911, 403}, {3913, 3945, 404}, {4256, 4293, 405}, {4304, 4342, 406}, {4352, 4441, 407}, {4447, 4514, 408}, {4520, 4601, 409}, {7680, 7835, 410}, {7840, 7929, 411}, {7936, 7957, 412}, {7960, 7965, 413}, {7968, 8005, 414}, {8008, 8013, 415}, {8016, 8023, 416}, {8025, 8025, 417}, {8027, 8027, 418}, {8029, 8029, 419}, {8031, 8061, 420}, {8064, 8116, 421}, {8118, 8124, 422}, {8126, 8126, 423}, {8130, 8132, 424}, {8134, 8140, 425}, {8144, 8147, 426}, {8150, 8155, 427}, {8160, 8172, 428}, {8178, 8180, 429}, {8182, 8188, 430}, {8319, 8319, 431}, {8450, 8450, 432}, {8455, 8455, 433}, {8458, 8467, 434}, {8469, 8469, 435}, {8472, 8477, 436}, {8484, 8484, 437}, {8486, 8486, 438}, {8488, 8488, 439}, {8490, 8497, 440}, {8499, 8504, 441}, {12293, 12293, 442}, {12337, 12341, 443}, {12353, 12436, 444}, {12443, 12446, 445}, {12449, 12538, 446}, {12540, 12542, 447}, {12549, 12588, 448}, {12593, 12686, 449}, {19968, 40869, 450}, {44032, 55203, 451}, {63744, 64045, 452}, {64256, 64262, 453}, {64275, 64279, 454}, {64287, 64296, 455}, {64298, 64310, 456}, {64312, 64316, 457}, {64318, 64318, 458}, {64320, 64321, 459}, {64323, 64324, 460}, {64326, 64433, 461}, {64467, 64829, 462}, {64848, 64911, 463}, {64914, 64967, 464}, {65008, 65019, 465}, {65136, 65138, 466}, {65140, 65140, 467}, {65142, 65276, 468}, {65296, 65305, 469}, {65313, 65338, 470}, {65345, 65370, 471}, {65382, 65470, 472}, {65474, 65479, 473}, {65482, 65487, 474}, {65490, 65495, 475}, {65498, 65500, 476}, },
            {{0, 9, 477}, {10, 10, 478}, {11, 12, 477}, {13, 13, 479}, {14, 65535, 477}, },
            {{0, 9, 480}, {11, 12, 480}, {14, 38, 480}, {39, 39, 481}, {40, 65535, 480}, },
            {},
            {},
            {},
            {{46, 46, 16}, {48, 48, 482}, {49, 57, 19}, },
            {},
            {{46, 57, -15}, },
            {{48, 57, 483}, },
            {{42, 42, 484}, {47, 47, 485}, },
            {{46, 46, 486}, {48, 55, 487}, {56, 57, 488}, {68, 68, 489}, {69, 69, 490}, {70, 70, 491}, {76, 76, 492}, {88, 88, 493}, {100, 100, 494}, {101, 101, 495}, {102, 102, 496}, {108, 108, 497}, {120, 120, 498}, },
            {{46, 46, 486}, {48, 57, 499}, {68, 76, -20}, {100, 108, -20}, },
            {},
            {},
            {{36, 65500, -9}, },
            {{36, 57, -9}, {65, 65, 500}, {66, 90, 249}, {95, 95, 250}, {97, 97, 501}, {98, 122, 251}, {170, 65500, -9}, },
            {{36, 57, -9}, {65, 68, 249}, {69, 69, 502}, {70, 84, 249}, {85, 85, 503}, {86, 90, 249}, {95, 95, 250}, {97, 100, 251}, {101, 101, 504}, {102, 116, 251}, {117, 117, 505}, {118, 122, 251}, {170, 65500, -9}, },
            {{36, 57, -9}, {65, 81, 249}, {82, 82, 506}, {83, 90, 249}, {95, 95, 250}, {97, 113, 251}, {114, 114, 507}, {115, 122, 251}, {170, 65500, -9}, },
            {},
            {},
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 95, -9}, {97, 97, 508}, {98, 65500, -25}, },
            {{36, 95, -9}, {97, 100, 251}, {101, 101, 509}, {102, 116, 251}, {117, 117, 510}, {118, 65500, -26}, },
            {{36, 95, -9}, {97, 113, 251}, {114, 114, 511}, {115, 65500, -27}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{9, 32, -2}, },
            {{0, 65535, -8}, },
            {},
            {{34, 34, 512}, {39, 39, 513}, {48, 51, 514}, {52, 55, 515}, {92, 92, 516}, {98, 98, 517}, {102, 102, 518}, {110, 110, 519}, {114, 114, 520}, {116, 116, 521}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{0, 65535, -10}, },
            {},
            {{10, 10, 522}, },
            {{0, 65535, -11}, },
            {},
            {{46, 46, 486}, {48, 57, 488}, {68, 108, -21}, },
            {{48, 57, 483}, {68, 68, 523}, {69, 69, 524}, {70, 70, 525}, {100, 100, 526}, {101, 101, 527}, {102, 102, 528}, },
            {{0, 9, 529}, {10, 10, 530}, {11, 12, 529}, {13, 13, 531}, {14, 41, 529}, {42, 42, 532}, {43, 65535, 529}, },
            {{0, 9, 533}, {10, 10, 534}, {11, 12, 533}, {13, 13, 535}, {14, 65535, 533}, },
            {{48, 57, 536}, {68, 68, 537}, {69, 69, 538}, {70, 70, 539}, {100, 100, 540}, {101, 101, 541}, {102, 102, 542}, },
            {{46, 70, -20}, {76, 76, 543}, {100, 102, -20}, {108, 108, 544}, },
            {{46, 70, -484}, {100, 102, -20}, },
            {},
            {{43, 43, 545}, {45, 45, 546}, {48, 57, 547}, },
            {},
            {},
            {{48, 57, 548}, {65, 70, 549}, {97, 102, 550}, },
            {},
            {{43, 57, -492}, },
            {},
            {},
            {{48, 102, -495}, },
            {{46, 108, -21}, },
            {{36, 57, -9}, {65, 75, 249}, {76, 76, 551}, {77, 90, 249}, {95, 65500, -9}, },
            {{36, 95, -9}, {97, 107, 251}, {108, 108, 552}, {109, 122, 251}, {170, 65500, -9}, },
            {{36, 57, -9}, {65, 86, 249}, {87, 87, 553}, {88, 90, 249}, {95, 65500, -9}, },
            {{36, 75, -502}, {76, 76, 554}, {77, 65500, -502}, },
            {{36, 95, -9}, {97, 118, 251}, {119, 119, 555}, {120, 122, 251}, {170, 65500, -9}, },
            {{36, 107, -503}, {108, 108, 556}, {109, 65500, -503}, },
            {{36, 57, -9}, {65, 84, 249}, {85, 85, 557}, {86, 95, -26}, {97, 65500, -9}, },
            {{36, 95, -9}, {97, 116, 251}, {117, 117, 558}, {118, 65500, -26}, },
            {{36, 107, -503}, {108, 108, 559}, {109, 65500, -503}, },
            {{36, 118, -506}, {119, 119, 560}, {120, 65500, -506}, },
            {{36, 107, -503}, {108, 108, 561}, {109, 65500, -503}, },
            {{36, 116, -509}, {117, 117, 562}, {118, 65500, -26}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 34, -8}, {35, 47, 244}, {48, 55, 563}, {56, 91, 244}, {92, 65535, -8}, },
            {{0, 47, -516}, {48, 55, 564}, {56, 65535, -516}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {},
            {},
            {{43, 43, 565}, {45, 45, 566}, {48, 57, 567}, },
            {},
            {},
            {{43, 57, -526}, },
            {},
            {{0, 41, -486}, {42, 42, 568}, {43, 65535, 529}, },
            {{0, 65535, -531}, },
            {{0, 9, 529}, {10, 10, 569}, {11, 65535, -531}, },
            {{0, 9, 570}, {10, 10, 571}, {11, 12, 570}, {13, 13, 572}, {14, 41, 570}, {42, 42, 573}, {43, 46, 570}, {47, 47, 574}, {48, 65535, 570}, },
            {{0, 65535, -487}, },
            {},
            {{10, 10, 575}, },
            {{48, 102, -488}, },
            {},
            {{43, 43, 576}, {45, 45, 577}, {48, 57, 578}, },
            {},
            {},
            {{43, 57, -540}, },
            {},
            {},
            {},
            {{48, 57, 547}, },
            {{48, 57, 547}, },
            {{48, 57, 547}, {68, 68, 579}, {70, 70, 580}, {100, 100, 581}, {102, 102, 582}, },
            {{48, 70, -495}, {76, 76, 583}, {97, 102, 550}, {108, 108, 584}, },
            {{48, 108, -550}, },
            {{48, 108, -550}, },
            {{36, 57, -9}, {65, 82, 249}, {83, 83, 585}, {84, 90, 249}, {95, 65500, -9}, },
            {{36, 95, -9}, {97, 114, 251}, {115, 115, 586}, {116, 122, 251}, {170, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 75, -502}, {76, 76, 587}, {77, 65500, -502}, },
            {{36, 65500, -9}, },
            {{36, 107, -503}, {108, 108, 588}, {109, 65500, -503}, },
            {{36, 68, -26}, {69, 69, 589}, {70, 90, 249}, {95, 65500, -9}, },
            {{36, 100, -33}, {101, 101, 590}, {102, 122, 251}, {170, 65500, -9}, },
            {{36, 114, -554}, {115, 115, 591}, {116, 65500, -554}, },
            {{36, 65500, -9}, },
            {{36, 107, -503}, {108, 108, 592}, {109, 65500, -503}, },
            {{36, 100, -33}, {101, 101, 593}, {102, 65500, -560}, },
            {{0, 47, -516}, {48, 55, 594}, {56, 65535, -516}, },
            {{0, 65535, -8}, },
            {{48, 57, 567}, },
            {{48, 57, 567}, },
            {{48, 57, 567}, {68, 68, 523}, {70, 100, -485}, {102, 102, 528}, },
            {{0, 9, 595}, {10, 10, 596}, {11, 12, 595}, {13, 13, 597}, {14, 41, 595}, {42, 42, 568}, {43, 46, 595}, {47, 47, 598}, {48, 65535, 595}, },
            {{0, 65535, -531}, },
            {{0, 9, 599}, {10, 10, 600}, {11, 12, 599}, {13, 13, 601}, {14, 41, 599}, {42, 42, 602}, {43, 65535, 599}, },
            {{0, 65535, -572}, },
            {{0, 9, 599}, {10, 10, 603}, {11, 65535, -572}, },
            {{0, 65535, -534}, },
            {},
            {},
            {{48, 57, 578}, },
            {{48, 57, 578}, },
            {{48, 57, 578}, {68, 68, 537}, {70, 100, -488}, {102, 102, 542}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{36, 68, -26}, {69, 69, 604}, {70, 65500, -559}, },
            {{36, 100, -33}, {101, 101, 605}, {102, 65500, -560}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 100, -33}, {101, 101, 606}, {102, 65500, -560}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{0, 65535, -8}, },
            {{0, 9, 607}, {10, 10, 608}, {11, 12, 607}, {13, 13, 609}, {14, 41, 607}, {42, 42, 610}, {43, 65535, 607}, },
            {{0, 65535, -597}, },
            {{0, 9, 607}, {10, 10, 611}, {11, 65535, -597}, },
            {},
            {{0, 65535, -572}, },
            {{0, 65535, -572}, },
            {{0, 9, 599}, {10, 10, 612}, {11, 65535, -572}, },
            {{0, 41, -534}, {42, 42, 602}, {43, 65535, -534}, },
            {{0, 65535, -572}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{36, 65500, -9}, },
            {{0, 65535, -597}, },
            {{0, 65535, -597}, },
            {{0, 9, 607}, {10, 10, 613}, {11, 65535, -597}, },
            {{0, 41, -570}, {42, 42, 610}, {43, 65535, -570}, },
            {{0, 65535, -597}, },
            {{0, 65535, -572}, },
            {{0, 65535, -597}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {21, 21, 21, 21, 21, 21, -1, 15, 25, -1, 7, 8, 3, 1, 5, 2, -1, 4, 16, 16, 0, 6, 15, 15, 15, 15, 9, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 21, -1, 20, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 25, 25, 25, -1, 19, 16, 17, -1, 24, 17, 16, -1, 17, -1, 17, 16, -1, 17, -1, 17, 16, -1, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 17, -1, 17, 17, -1, 17, -1, -1, -1, -1, 24, 24, 24, 17, 17, -1, 17, 17, -1, 17, 16, 16, -1, -1, 17, 16, 16, 16, 15, 15, 12, 15, 12, 15, 15, 15, 15, 12, 15, 15, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, 23, 24, -1, -1, 17, 17, 17, 17, 17, 16, 16, 15, 15, 11, 11, 13, 13, 15, 11, 13, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, 14, 14, 14, -1, -1, -1, -1, -1, -1, -1, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
