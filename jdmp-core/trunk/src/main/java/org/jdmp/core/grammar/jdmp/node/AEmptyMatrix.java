/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.grammar.jdmp.node;

import org.jdmp.core.grammar.jdmp.analysis.*;

@SuppressWarnings("nls")
public final class AEmptyMatrix extends PMatrix
{
    private TLBracketToken _lBracketToken_;
    private TRBracketToken _rBracketToken_;

    public AEmptyMatrix()
    {
        // Constructor
    }

    public AEmptyMatrix(
        @SuppressWarnings("hiding") TLBracketToken _lBracketToken_,
        @SuppressWarnings("hiding") TRBracketToken _rBracketToken_)
    {
        // Constructor
        setLBracketToken(_lBracketToken_);

        setRBracketToken(_rBracketToken_);

    }

    @Override
    public Object clone()
    {
        return new AEmptyMatrix(
            cloneNode(this._lBracketToken_),
            cloneNode(this._rBracketToken_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEmptyMatrix(this);
    }

    public TLBracketToken getLBracketToken()
    {
        return this._lBracketToken_;
    }

    public void setLBracketToken(TLBracketToken node)
    {
        if(this._lBracketToken_ != null)
        {
            this._lBracketToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBracketToken_ = node;
    }

    public TRBracketToken getRBracketToken()
    {
        return this._rBracketToken_;
    }

    public void setRBracketToken(TRBracketToken node)
    {
        if(this._rBracketToken_ != null)
        {
            this._rBracketToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBracketToken_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBracketToken_)
            + toString(this._rBracketToken_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBracketToken_ == child)
        {
            this._lBracketToken_ = null;
            return;
        }

        if(this._rBracketToken_ == child)
        {
            this._rBracketToken_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBracketToken_ == oldChild)
        {
            setLBracketToken((TLBracketToken) newChild);
            return;
        }

        if(this._rBracketToken_ == oldChild)
        {
            setRBracketToken((TRBracketToken) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
