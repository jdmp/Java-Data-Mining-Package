/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.script.jdmp.analysis;

import org.jdmp.core.script.jdmp.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAScript(AScript node);
    void caseAAssignmentCommand(AAssignmentCommand node);
    void caseAStatementCommand(AStatementCommand node);
    void caseAStatement(AStatement node);
    void caseAIdentifierAssignment(AIdentifierAssignment node);
    void caseAArrayAssignment(AArrayAssignment node);
    void caseALevel10Expression(ALevel10Expression node);
    void caseAStepsize(AStepsize node);
    void caseALevel9Level10(ALevel9Level10 node);
    void caseALogicalOrLevel10(ALogicalOrLevel10 node);
    void caseALevel8Level9(ALevel8Level9 node);
    void caseALogicalAndLevel9(ALogicalAndLevel9 node);
    void caseALevel7Level8(ALevel7Level8 node);
    void caseAOrLevel8(AOrLevel8 node);
    void caseALevel6Level7(ALevel6Level7 node);
    void caseAAndLevel7(AAndLevel7 node);
    void caseALevel5Level6(ALevel5Level6 node);
    void caseAEqLevel6(AEqLevel6 node);
    void caseANeqLevel6(ANeqLevel6 node);
    void caseALteqLevel6(ALteqLevel6 node);
    void caseAGteqLevel6(AGteqLevel6 node);
    void caseAGtLevel6(AGtLevel6 node);
    void caseALtLevel6(ALtLevel6 node);
    void caseALevel4Level5(ALevel4Level5 node);
    void caseARangeLevel5(ARangeLevel5 node);
    void caseALevel3Level4(ALevel3Level4 node);
    void caseAPlusLevel4(APlusLevel4 node);
    void caseAMinusLevel4(AMinusLevel4 node);
    void caseALevel2Level3(ALevel2Level3 node);
    void caseAMultLevel3(AMultLevel3 node);
    void caseADotMultLevel3(ADotMultLevel3 node);
    void caseARdivLevel3(ARdivLevel3 node);
    void caseADotRdivLevel3(ADotRdivLevel3 node);
    void caseALdivLevel3(ALdivLevel3 node);
    void caseADotLdivLevel3(ADotLdivLevel3 node);
    void caseALevel1Level2(ALevel1Level2 node);
    void caseAComplementLevel2(AComplementLevel2 node);
    void caseABitComplementLevel2(ABitComplementLevel2 node);
    void caseAPlusLevel2(APlusLevel2 node);
    void caseAMinusLevel2(AMinusLevel2 node);
    void caseALevel0Level1(ALevel0Level1 node);
    void caseATransposeLevel1(ATransposeLevel1 node);
    void caseADotTransposeLevel1(ADotTransposeLevel1 node);
    void caseAPowerLevel1(APowerLevel1 node);
    void caseADotPowerLevel1(ADotPowerLevel1 node);
    void caseALiteralLevel0(ALiteralLevel0 node);
    void caseAMatrixLevel0(AMatrixLevel0 node);
    void caseAFunctionLevel0(AFunctionLevel0 node);
    void caseAIdentifierLevel0(AIdentifierLevel0 node);
    void caseAExpressionLevel0(AExpressionLevel0 node);
    void caseAEmptyFunction(AEmptyFunction node);
    void caseAParameterFunction(AParameterFunction node);
    void caseAExpressionArgumentList(AExpressionArgumentList node);
    void caseAArgumentListArgumentList(AArgumentListArgumentList node);
    void caseAIntegerLiteral(AIntegerLiteral node);
    void caseAFloatingPointLiteral(AFloatingPointLiteral node);
    void caseAStringLiteral(AStringLiteral node);
    void caseABooleanLiteral(ABooleanLiteral node);
    void caseASimpleName(ASimpleName node);
    void caseAQualifiedName(AQualifiedName node);
    void caseAEmptyMatrix(AEmptyMatrix node);
    void caseAValueMatrix(AValueMatrix node);
    void caseARowMatrix(ARowMatrix node);
    void caseAColumnMatrix(AColumnMatrix node);
    void caseAArrayMatrix(AArrayMatrix node);
    void caseAArray(AArray node);
    void caseAColumn(AColumn node);
    void caseARow(ARow node);
    void caseACommaValue(ACommaValue node);
    void caseASemicolonValue(ASemicolonValue node);
    void caseASemicolonRow(ASemicolonRow node);
    void caseATrueBoolean(ATrueBoolean node);
    void caseAFalseBoolean(AFalseBoolean node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTTraditionalComment(TTraditionalComment node);
    void caseTDocumentationComment(TDocumentationComment node);
    void caseTEndOfLineComment(TEndOfLineComment node);
    void caseTMatlabComment(TMatlabComment node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTNull(TNull node);
    void caseTLParenthese(TLParenthese node);
    void caseTRParenthese(TRParenthese node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTAssign(TAssign node);
    void caseTComplement(TComplement node);
    void caseTBitComplement(TBitComplement node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTLogicalAnd(TLogicalAnd node);
    void caseTLogicalOr(TLogicalOr node);
    void caseTQuestion(TQuestion node);
    void caseTColon(TColon node);
    void caseTEq(TEq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTNeq(TNeq node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDotMult(TDotMult node);
    void caseTRdiv(TRdiv node);
    void caseTDotRdiv(TDotRdiv node);
    void caseTLdiv(TLdiv node);
    void caseTDotLdiv(TDotLdiv node);
    void caseTTranspose(TTranspose node);
    void caseTDotTranspose(TDotTranspose node);
    void caseTPower(TPower node);
    void caseTDotPower(TDotPower node);
    void caseTInteger(TInteger node);
    void caseTFloatingPoint(TFloatingPoint node);
    void caseTString(TString node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
}
