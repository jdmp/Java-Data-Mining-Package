/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.script.jdmp.node;

import org.jdmp.core.script.jdmp.analysis.Analysis;

@SuppressWarnings("nls")
public final class APowerLevel1 extends PLevel1 {
	private PLevel1 _left_;
	private TPower _power_;
	private PLevel0 _right_;

	public APowerLevel1() {
		// Constructor
	}

	public APowerLevel1(@SuppressWarnings("hiding") PLevel1 _left_,
			@SuppressWarnings("hiding") TPower _power_, @SuppressWarnings("hiding") PLevel0 _right_) {
		// Constructor
		setLeft(_left_);

		setPower(_power_);

		setRight(_right_);

	}

	public Object clone() {
		return new APowerLevel1(cloneNode(this._left_), cloneNode(this._power_),
				cloneNode(this._right_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseAPowerLevel1(this);
	}

	public PLevel1 getLeft() {
		return this._left_;
	}

	public void setLeft(PLevel1 node) {
		if (this._left_ != null) {
			this._left_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._left_ = node;
	}

	public TPower getPower() {
		return this._power_;
	}

	public void setPower(TPower node) {
		if (this._power_ != null) {
			this._power_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._power_ = node;
	}

	public PLevel0 getRight() {
		return this._right_;
	}

	public void setRight(PLevel0 node) {
		if (this._right_ != null) {
			this._right_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._right_ = node;
	}

	public String toString() {
		return "" + toString(this._left_) + toString(this._power_) + toString(this._right_);
	}

	void removeChild(@SuppressWarnings("unused") Node child) {
		// Remove child
		if (this._left_ == child) {
			this._left_ = null;
			return;
		}

		if (this._power_ == child) {
			this._power_ = null;
			return;
		}

		if (this._right_ == child) {
			this._right_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	void replaceChild(@SuppressWarnings("unused") Node oldChild,
			@SuppressWarnings("unused") Node newChild) {
		// Replace child
		if (this._left_ == oldChild) {
			setLeft((PLevel1) newChild);
			return;
		}

		if (this._power_ == oldChild) {
			setPower((TPower) newChild);
			return;
		}

		if (this._right_ == oldChild) {
			setRight((PLevel0) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
