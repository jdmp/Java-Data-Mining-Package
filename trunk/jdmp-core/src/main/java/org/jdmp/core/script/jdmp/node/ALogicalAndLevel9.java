/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.script.jdmp.node;

import org.jdmp.core.script.jdmp.analysis.*;

@SuppressWarnings("nls")
public final class ALogicalAndLevel9 extends PLevel9
{
    private PLevel9 _left_;
    private TLogicalAnd _logicalAnd_;
    private PLevel8 _right_;

    public ALogicalAndLevel9()
    {
        // Constructor
    }

    public ALogicalAndLevel9(
        @SuppressWarnings("hiding") PLevel9 _left_,
        @SuppressWarnings("hiding") TLogicalAnd _logicalAnd_,
        @SuppressWarnings("hiding") PLevel8 _right_)
    {
        // Constructor
        setLeft(_left_);

        setLogicalAnd(_logicalAnd_);

        setRight(_right_);

    }

    
    public Object clone()
    {
        return new ALogicalAndLevel9(
            cloneNode(this._left_),
            cloneNode(this._logicalAnd_),
            cloneNode(this._right_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALogicalAndLevel9(this);
    }

    public PLevel9 getLeft()
    {
        return this._left_;
    }

    public void setLeft(PLevel9 node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TLogicalAnd getLogicalAnd()
    {
        return this._logicalAnd_;
    }

    public void setLogicalAnd(TLogicalAnd node)
    {
        if(this._logicalAnd_ != null)
        {
            this._logicalAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicalAnd_ = node;
    }

    public PLevel8 getRight()
    {
        return this._right_;
    }

    public void setRight(PLevel8 node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    
    public String toString()
    {
        return ""
            + toString(this._left_)
            + toString(this._logicalAnd_)
            + toString(this._right_);
    }

    
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._logicalAnd_ == child)
        {
            this._logicalAnd_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left_ == oldChild)
        {
            setLeft((PLevel9) newChild);
            return;
        }

        if(this._logicalAnd_ == oldChild)
        {
            setLogicalAnd((TLogicalAnd) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PLevel8) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
