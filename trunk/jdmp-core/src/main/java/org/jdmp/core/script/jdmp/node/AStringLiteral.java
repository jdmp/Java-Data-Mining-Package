/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jdmp.core.script.jdmp.node;

import org.jdmp.core.script.jdmp.analysis.Analysis;

@SuppressWarnings("nls")
public final class AStringLiteral extends PLiteral {
	private TString _string_;

	public AStringLiteral() {
		// Constructor
	}

	public AStringLiteral(@SuppressWarnings("hiding") TString _string_) {
		// Constructor
		setString(_string_);

	}

	public Object clone() {
		return new AStringLiteral(cloneNode(this._string_));
	}

	public void apply(Switch sw) {
		((Analysis) sw).caseAStringLiteral(this);
	}

	public TString getString() {
		return this._string_;
	}

	public void setString(TString node) {
		if (this._string_ != null) {
			this._string_.parent(null);
		}

		if (node != null) {
			if (node.parent() != null) {
				node.parent().removeChild(node);
			}

			node.parent(this);
		}

		this._string_ = node;
	}

	public String toString() {
		return "" + toString(this._string_);
	}

	void removeChild(@SuppressWarnings("unused") Node child) {
		// Remove child
		if (this._string_ == child) {
			this._string_ = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}

	void replaceChild(@SuppressWarnings("unused") Node oldChild,
			@SuppressWarnings("unused") Node newChild) {
		// Replace child
		if (this._string_ == oldChild) {
			setString((TString) newChild);
			return;
		}

		throw new RuntimeException("Not a child.");
	}
}
